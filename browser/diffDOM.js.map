{"version":3,"file":"diffDOM.js","sources":["../src/diffDOM/dom/fromVirtual.js","../src/diffDOM/dom/apply.js","../src/diffDOM/dom/undo.js","../src/diffDOM/virtual/helpers.js","../src/diffDOM/virtual/apply.js","../src/diffDOM/virtual/fromDOM.js","../src/diffDOM/virtual/fromString.js","../src/diffDOM/virtual/diff.js","../src/diffDOM/index.js","../src/TraceLogger.js"],"sourcesContent":["export function objToNode(objNode, insideSvg, options) {\r\n    let node\r\n    if (objNode.nodeName === '#text') {\r\n        node = options.document.createTextNode(objNode.data)\r\n\r\n    } else if (objNode.nodeName === '#comment') {\r\n        node = options.document.createComment(objNode.data)\r\n    } else {\r\n        if (insideSvg) {\r\n            if (objNode.nodeName === 'foreignObject') {\r\n                insideSvg = false;\r\n                node = options.document.createElementNS(objNode.nodeName)\r\n            } else {\r\n                node = options.document.createElementNS('http://www.w3.org/2000/svg', objNode.nodeName)\r\n            }\r\n        } else if (objNode.nodeName.toLowerCase() === 'svg') {\r\n            node = options.document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n            insideSvg = true\r\n        } else {\r\n            node = options.document.createElement(objNode.nodeName)\r\n        }\r\n\r\n        if (objNode.attributes) {\r\n            Object.entries(objNode.attributes).forEach(([key, value]) => node.setAttribute(key, value))\r\n        }\r\n        if (objNode.childNodes) {\r\n            objNode.childNodes.forEach(childNode => node.appendChild(objToNode(childNode, insideSvg, options)))\r\n        }\r\n        if (options.valueDiffing) {\r\n            if (objNode.value) {\r\n                node.value = objNode.value\r\n            }\r\n            if (objNode.checked) {\r\n                node.checked = objNode.checked\r\n            }\r\n            if (objNode.selected) {\r\n                node.selected = objNode.selected\r\n            }\r\n        }\r\n    }\r\n    return node\r\n}\r\n","import {objToNode} from \"./fromVirtual\"\r\n\r\n// ===== Apply a diff =====\r\n\r\nfunction getFromRoute(node, route) {\r\n    route = route.slice()\r\n    while (route.length > 0) {\r\n        if (!node.childNodes) {\r\n            return false\r\n        }\r\n        const c = route.splice(0, 1)[0]\r\n        node = node.childNodes[c]\r\n    }\r\n    return node\r\n}\r\n\r\nexport function applyDiff(\r\n        tree,\r\n        diff,\r\n        options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\r\n    ) {\r\n    let node = getFromRoute(tree, diff[options._const.route])\r\n    let newNode\r\n    let reference\r\n    let route\r\n    let nodeArray\r\n    let c\r\n\r\n    // pre-diff hook\r\n    const info = {\r\n        diff,\r\n        node\r\n    }\r\n\r\n    if (options.preDiffApply(info)) {\r\n        return true\r\n    }\r\n\r\n    switch (diff[options._const.action]) {\r\n        case options._const.addAttribute:\r\n            if (!node || !node.setAttribute) {\r\n                return false\r\n            }\r\n            node.setAttribute(diff[options._const.name], diff[options._const.value])\r\n            break\r\n        case options._const.modifyAttribute:\r\n            if (!node || !node.setAttribute) {\r\n                return false\r\n            }\r\n            node.setAttribute(diff[options._const.name], diff[options._const.newValue])\r\n            if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\r\n                node.value = diff[options._const.newValue]\r\n            }\r\n            break\r\n        case options._const.removeAttribute:\r\n            if (!node || !node.removeAttribute) {\r\n                return false\r\n            }\r\n            node.removeAttribute(diff[options._const.name])\r\n            break\r\n        case options._const.modifyTextElement:\r\n            if (!node || node.nodeType !== 3) {\r\n                return false\r\n            }\r\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\r\n            break\r\n        case options._const.modifyValue:\r\n            if (!node || typeof node.value === 'undefined') {\r\n                return false\r\n            }\r\n            node.value = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyComment:\r\n            if (!node || typeof node.data === 'undefined') {\r\n                return false\r\n            }\r\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\r\n            break\r\n        case options._const.modifyChecked:\r\n            if (!node || typeof node.checked === 'undefined') {\r\n                return false\r\n            }\r\n            node.checked = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifySelected:\r\n            if (!node || typeof node.selected === 'undefined') {\r\n                return false\r\n            }\r\n            node.selected = diff[options._const.newValue]\r\n            break\r\n        case options._const.replaceElement:\r\n            node.parentNode.replaceChild(\r\n                objToNode(\r\n                    diff[options._const.newValue],\r\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\r\n                    options\r\n                ),\r\n                node\r\n            )\r\n            break\r\n        case options._const.relocateGroup:\r\n            nodeArray = Array(...new Array(diff.groupLength)).map(() => node.removeChild(node.childNodes[diff[options._const.from]]))\r\n            nodeArray.forEach((childNode, index) => {\r\n                if (index === 0) {\r\n                    reference = node.childNodes[diff[options._const.to]]\r\n                }\r\n                node.insertBefore(childNode, reference || null)\r\n            })\r\n            break\r\n        case options._const.removeElement:\r\n            node.parentNode.removeChild(node)\r\n            break\r\n        case options._const.addElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            node = getFromRoute(tree, route)\r\n            node.insertBefore(\r\n                objToNode(\r\n                    diff[options._const.element],\r\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\r\n                    options\r\n                ),\r\n                node.childNodes[c] || null\r\n            )\r\n            break\r\n        case options._const.removeTextElement:\r\n            if (!node || node.nodeType !== 3) {\r\n                return false\r\n            }\r\n            node.parentNode.removeChild(node)\r\n            break\r\n        case options._const.addTextElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            newNode = options.document.createTextNode(diff[options._const.value])\r\n            node = getFromRoute(tree, route)\r\n            if (!node || !node.childNodes) {\r\n                return false\r\n            }\r\n            node.insertBefore(newNode, node.childNodes[c] || null)\r\n            break\r\n        default:\r\n            console.log('unknown action')\r\n    }\r\n\r\n    // if a new node was created, we might be interested in its\r\n    // post diff hook\r\n    info.newNode = newNode\r\n    options.postDiffApply(info)\r\n\r\n    return true\r\n}\r\n\r\nexport function applyDOM(tree, diffs, options) {\r\n    return diffs.every(diff => applyDiff(tree, diff, options))\r\n}\r\n","import {applyDiff} from \"./apply\"\r\n\r\n// ===== Undo a diff =====\r\n\r\nfunction swap(obj, p1, p2) {\r\n    const tmp = obj[p1]\r\n    obj[p1] = obj[p2]\r\n    obj[p2] = tmp\r\n}\r\n\r\nfunction undoDiff(\r\n    tree,\r\n    diff,\r\n    options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\r\n) {\r\n\r\n    switch (diff[options._const.action]) {\r\n        case options._const.addAttribute:\r\n            diff[options._const.action] = options._const.removeAttribute\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyAttribute:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.removeAttribute:\r\n            diff[options._const.action] = options._const.addAttribute\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyTextElement:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyValue:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyComment:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyChecked:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifySelected:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.replaceElement:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.relocateGroup:\r\n            swap(diff, options._const.from, options._const.to)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.removeElement:\r\n            diff[options._const.action] = options._const.addElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.addElement:\r\n            diff[options._const.action] = options._const.removeElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.removeTextElement:\r\n            diff[options._const.action] = options._const.addTextElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.addTextElement:\r\n            diff[options._const.action] = options._const.removeTextElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        default:\r\n            console.log('unknown action')\r\n    }\r\n\r\n}\r\n\r\nexport function undoDOM(tree, diffs, options) {\r\n    if (!diffs.length) {\r\n        diffs = [diffs]\r\n    }\r\n    diffs = diffs.slice()\r\n    diffs.reverse()\r\n    diffs.forEach(diff => {\r\n        undoDiff(tree, diff, options)\r\n    })\r\n}\r\n","export class Diff {\r\n    constructor(options = {}) {\r\n        Object.entries(options).forEach(([key, value]) => this[key] = value)\r\n    }\r\n\r\n    toString() {\r\n        return JSON.stringify(this)\r\n    }\r\n\r\n    setValue(aKey, aValue) {\r\n        this[aKey] = aValue\r\n        return this\r\n    }\r\n}\r\n\r\nfunction elementDescriptors(el) {\r\n    const output = []\r\n    output.push(el.nodeName)\r\n    if (el.nodeName !== '#text' && el.nodeName !== '#comment') {\r\n        if (el.attributes) {\r\n            if (el.attributes['class']) {\r\n                output.push(`${el.nodeName}.${el.attributes['class'].replace(/ /g, '.')}`)\r\n            }\r\n            if (el.attributes.id) {\r\n                output.push(`${el.nodeName}#${el.attributes.id}`)\r\n            }\r\n        }\r\n\r\n    }\r\n    return output\r\n}\r\n\r\nfunction findUniqueDescriptors(li) {\r\n    const uniqueDescriptors = {}\r\n    const duplicateDescriptors = {}\r\n\r\n    li.forEach(node => {\r\n        elementDescriptors(node).forEach(descriptor => {\r\n            const inUnique = descriptor in uniqueDescriptors\r\n            const inDupes = descriptor in duplicateDescriptors\r\n            if (!inUnique && !inDupes) {\r\n                uniqueDescriptors[descriptor] = true\r\n            } else if (inUnique) {\r\n                delete uniqueDescriptors[descriptor]\r\n                duplicateDescriptors[descriptor] = true\r\n            }\r\n        })\r\n    })\r\n\r\n    return uniqueDescriptors\r\n}\r\n\r\nfunction uniqueInBoth(l1, l2) {\r\n    const l1Unique = findUniqueDescriptors(l1)\r\n    const l2Unique = findUniqueDescriptors(l2)\r\n    const inBoth = {}\r\n\r\n    Object.keys(l1Unique).forEach(key => {\r\n        if (l2Unique[key]) {\r\n            inBoth[key] = true\r\n        }\r\n    })\r\n\r\n    return inBoth\r\n}\r\n\r\nexport function removeDone(tree) {\r\n    delete tree.outerDone\r\n    delete tree.innerDone\r\n    delete tree.valueDone\r\n    if (tree.childNodes) {\r\n        return tree.childNodes.every(removeDone)\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nexport function isEqual(e1, e2) {\r\n    if (!['nodeName', 'value', 'checked', 'selected', 'data'].every(element => {\r\n            if (e1[element] !== e2[element]) {\r\n                return false\r\n            }\r\n            return true\r\n        })) {\r\n        return false\r\n    }\r\n\r\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\r\n        return false\r\n    }\r\n\r\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\r\n        return false\r\n    }\r\n    if (e1.attributes) {\r\n        const e1Attributes = Object.keys(e1.attributes)\r\n        const e2Attributes = Object.keys(e2.attributes)\r\n\r\n        if (e1Attributes.length !== e2Attributes.length) {\r\n            return false\r\n        }\r\n        if (!e1Attributes.every(attribute => {\r\n                if (e1.attributes[attribute] !== e2.attributes[attribute]) {\r\n                    return false\r\n                }\r\n                return true\r\n            })) {\r\n            return false\r\n        }\r\n    }\r\n    if (e1.childNodes) {\r\n        if (e1.childNodes.length !== e2.childNodes.length) {\r\n            return false\r\n        }\r\n        if (!e1.childNodes.every((childNode, index) => isEqual(childNode, e2.childNodes[index]))) {\r\n\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n\r\nexport function roughlyEqual(e1, e2, uniqueDescriptors, sameSiblings, preventRecursion) {\r\n\r\n    if (!e1 || !e2) {\r\n        return false\r\n    }\r\n\r\n    if (e1.nodeName !== e2.nodeName) {\r\n        return false\r\n    }\r\n\r\n    if (e1.nodeName === '#text') {\r\n        // Note that we initially don't care what the text content of a node is,\r\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\r\n        // equal, and then we can find out the true text difference later.\r\n        return preventRecursion ? true : e1.data === e2.data\r\n    }\r\n\r\n\r\n    if (e1.nodeName in uniqueDescriptors) {\r\n        return true\r\n    }\r\n\r\n    if (e1.attributes && e2.attributes) {\r\n\r\n        if (e1.attributes.id) {\r\n            if (e1.attributes.id !== e2.attributes.id) {\r\n                return false\r\n            } else {\r\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\r\n                if (idDescriptor in uniqueDescriptors) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        if (e1.attributes['class'] && e1.attributes['class'] === e2.attributes['class']) {\r\n            const classDescriptor = `${e1.nodeName}.${e1.attributes['class'].replace(/ /g, '.')}`\r\n            if (classDescriptor in uniqueDescriptors) {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    if (sameSiblings) {\r\n        return true\r\n    }\r\n\r\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\r\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\r\n\r\n    if (nodeList1.length !== nodeList2.length) {\r\n        return false\r\n    }\r\n\r\n    if (preventRecursion) {\r\n        return nodeList1.every((element, index) => element.nodeName === nodeList2[index].nodeName)\r\n    } else {\r\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\r\n        // was not set, we must explicitly force it to true for child iterations.\r\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\r\n        return nodeList1.every((element, index) => roughlyEqual(element, nodeList2[index], childUniqueDescriptors, true, true))\r\n    }\r\n}\r\n\r\n\r\nexport function cloneObj(obj) { //  TODO: Do we really need to clone here? Is it not enough to just return the original object?\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\n/**\r\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\r\n */\r\nfunction findCommonSubsets(c1, c2, marked1, marked2) {\r\n    let lcsSize = 0\r\n    let index = []\r\n    const c1Length = c1.length\r\n    const c2Length = c2.length\r\n\r\n    const // set up the matching table\r\n        matches = Array(...new Array(c1Length + 1)).map(() => [])\r\n\r\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\r\n\r\n    let // If all of the elements are the same tag, id and class, then we can\r\n        // consider them roughly the same even if they have a different number of\r\n        // children. This will reduce removing and re-adding similar elements.\r\n        subsetsSame = c1Length === c2Length\r\n\r\n    if (subsetsSame) {\r\n\r\n        c1.some((element, i) => {\r\n            const c1Desc = elementDescriptors(element)\r\n            const c2Desc = elementDescriptors(c2[i])\r\n            if (c1Desc.length !== c2Desc.length) {\r\n                subsetsSame = false\r\n                return true\r\n            }\r\n            c1Desc.some((description, i) => {\r\n                if (description !== c2Desc[i]) {\r\n                    subsetsSame = false\r\n                    return true\r\n                }\r\n            })\r\n            if (!subsetsSame) {\r\n                return true\r\n            }\r\n        })\r\n    }\r\n\r\n    // fill the matches with distance values\r\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\r\n        const c1Element = c1[c1Index]\r\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\r\n            const c2Element = c2[c2Index]\r\n            if (!marked1[c1Index] && !marked2[c2Index] && roughlyEqual(c1Element, c2Element, uniqueDescriptors, subsetsSame)) {\r\n                matches[c1Index + 1][c2Index + 1] = (matches[c1Index][c2Index] ? matches[c1Index][c2Index] + 1 : 1)\r\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\r\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\r\n                    index = [c1Index + 1, c2Index + 1]\r\n                }\r\n            } else {\r\n                matches[c1Index + 1][c2Index + 1] = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    if (lcsSize === 0) {\r\n        return false\r\n    }\r\n\r\n    return {\r\n        oldValue: index[0] - lcsSize,\r\n        newValue: index[1] - lcsSize,\r\n        length: lcsSize\r\n    }\r\n}\r\n\r\n/**\r\n * This should really be a predefined function in Array...\r\n */\r\nfunction makeArray(n, v) {\r\n    return Array(...new Array(n)).map(() => v)\r\n}\r\n\r\n/**\r\n * Generate arrays that indicate which node belongs to which subset,\r\n * or whether it's actually an orphan node, existing in only one\r\n * of the two trees, rather than somewhere in both.\r\n *\r\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\r\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\r\n * The second longest is \"<img>\" (length 1), so it will be group 1.\r\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\r\n *\r\n * If an element is not part of any group, it will stay being 'true', which\r\n * is the initial value. For example:\r\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\r\n *\r\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\r\n * therefore be marked by \"true\". The remaining parts are parts of the\r\n * groups 0 and 1:\r\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\r\n *\r\n */\r\nexport function getGapInformation(t1, t2, stable) {\r\n    const gaps1 = t1.childNodes ? makeArray(t1.childNodes.length, true) : []\r\n    const gaps2 = t2.childNodes ? makeArray(t2.childNodes.length, true) : []\r\n    let group = 0\r\n\r\n    // give elements from the same subset the same group number\r\n    stable.forEach(subset => {\r\n        const endOld = subset.oldValue + subset.length\r\n        const endNew = subset.newValue + subset.length\r\n\r\n        for (let j = subset.oldValue; j < endOld; j += 1) {\r\n            gaps1[j] = group\r\n        }\r\n        for (let j = subset.newValue; j < endNew; j += 1) {\r\n            gaps2[j] = group\r\n        }\r\n        group += 1\r\n    })\r\n\r\n    return {\r\n        gaps1,\r\n        gaps2\r\n    }\r\n}\r\n\r\n/**\r\n * Find all matching subsets, based on immediate child differences only.\r\n */\r\nexport function markSubTrees(oldTree, newTree) {\r\n    // note: the child lists are views, and so update as we update old/newTree\r\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\r\n\r\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\r\n    const marked1 = makeArray(oldChildren.length, false)\r\n    const marked2 = makeArray(newChildren.length, false)\r\n    const subsets = []\r\n    let subset = true\r\n\r\n    const returnIndex = function() {\r\n        return arguments[1]\r\n    }\r\n\r\n    const markBoth = i => {\r\n        marked1[subset.oldValue + i] = true\r\n        marked2[subset.newValue + i] = true\r\n    }\r\n\r\n    while (subset) {\r\n        subset = findCommonSubsets(oldChildren, newChildren, marked1, marked2)\r\n        if (subset) {\r\n            subsets.push(subset)\r\n            const subsetArray = Array(...new Array(subset.length)).map(returnIndex)\r\n            subsetArray.forEach(item => markBoth(item))\r\n        }\r\n    }\r\n\r\n    oldTree.subsets = subsets\r\n    oldTree.subsetsAge = 100\r\n    return subsets\r\n}\r\n\r\nexport class DiffTracker {\r\n    constructor() {\r\n        this.list = []\r\n    }\r\n\r\n    add(diffs) {\r\n        this.list.push(...diffs)\r\n    }\r\n    forEach(fn) {\r\n        this.list.forEach(li => fn(li))\r\n    }\r\n\r\n}\r\n","import {cloneObj} from \"./helpers\"\r\n\r\n// ===== Apply a virtual diff =====\r\n\r\nfunction getFromVirtualRoute(tree, route) {\r\n    let node = tree\r\n    let parentNode\r\n    let nodeIndex\r\n\r\n    route = route.slice()\r\n    while (route.length > 0) {\r\n        if (!node.childNodes) {\r\n            return false\r\n        }\r\n        nodeIndex = route.splice(0, 1)[0]\r\n        parentNode = node\r\n        node = node.childNodes[nodeIndex]\r\n    }\r\n    return {\r\n        node,\r\n        parentNode,\r\n        nodeIndex\r\n    }\r\n}\r\n\r\nfunction applyVirtualDiff(\r\n        tree,\r\n        diff,\r\n        options // {preVirtualDiffApply, postVirtualDiffApply, _const}\r\n    ) {\r\n    const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\r\n    let node = routeInfo.node\r\n    const parentNode = routeInfo.parentNode\r\n    const nodeIndex = routeInfo.nodeIndex\r\n    const newSubsets = []\r\n\r\n    // pre-diff hook\r\n    const info = {\r\n        diff,\r\n        node\r\n    }\r\n\r\n    if (options.preVirtualDiffApply(info)) {\r\n        return true\r\n    }\r\n\r\n    let newNode\r\n    let nodeArray\r\n    let route\r\n    let c\r\n    switch (diff[options._const.action]) {\r\n        case options._const.addAttribute:\r\n            if (!node.attributes) {\r\n                node.attributes = {}\r\n            }\r\n\r\n            node.attributes[diff[options._const.name]] = diff[options._const.value]\r\n\r\n            if (diff[options._const.name] === 'checked') {\r\n                node.checked = true\r\n            } else if (diff[options._const.name] === 'selected') {\r\n                node.selected = true\r\n            } else if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\r\n                node.value = diff[options._const.value]\r\n            }\r\n\r\n            break\r\n        case options._const.modifyAttribute:\r\n            node.attributes[diff[options._const.name]] = diff[options._const.newValue]\r\n            break\r\n        case options._const.removeAttribute:\r\n\r\n            delete node.attributes[diff[options._const.name]]\r\n\r\n            if (Object.keys(node.attributes).length === 0) {\r\n                delete node.attributes\r\n            }\r\n\r\n            if (diff[options._const.name] === 'checked') {\r\n                node.checked = false\r\n            } else if (diff[options._const.name] === 'selected') {\r\n                delete node.selected\r\n            } else if (node.nodeName === 'INPUT' && diff[options._const.name] === 'value') {\r\n                delete node.value\r\n            }\r\n\r\n            break\r\n        case options._const.modifyTextElement:\r\n            node.data = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyValue:\r\n            node.value = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyComment:\r\n            node.data = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyChecked:\r\n            node.checked = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifySelected:\r\n            node.selected = diff[options._const.newValue]\r\n            break\r\n        case options._const.replaceElement:\r\n            newNode = cloneObj(diff[options._const.newValue])\r\n            newNode.outerDone = true\r\n            newNode.innerDone = true\r\n            newNode.valueDone = true\r\n            parentNode.childNodes[nodeIndex] = newNode\r\n            break\r\n        case options._const.relocateGroup:\r\n            nodeArray = node.childNodes.splice(diff[options._const.from], diff.groupLength).reverse()\r\n            nodeArray.forEach(movedNode => node.childNodes.splice(diff[options._const.to], 0, movedNode))\r\n            if (node.subsets) {\r\n                node.subsets.forEach(map => {\r\n                    if (diff[options._const.from] < diff[options._const.to] && map.oldValue <= diff[options._const.to] && map.oldValue > diff[options._const.from]) {\r\n                        map.oldValue -= diff.groupLength\r\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\r\n                        if (splitLength > 0) {\r\n                            // new insertion splits map.\r\n                            newSubsets.push({\r\n                                oldValue: diff[options._const.to] + diff.groupLength,\r\n                                newValue: map.newValue + map.length - splitLength,\r\n                                length: splitLength\r\n                            })\r\n                            map.length -= splitLength\r\n                        }\r\n                    } else if (diff[options._const.from] > diff[options._const.to] && map.oldValue > diff[options._const.to] && map.oldValue < diff[options._const.from]) {\r\n                        map.oldValue += diff.groupLength\r\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\r\n                        if (splitLength > 0) {\r\n                            // new insertion splits map.\r\n                            newSubsets.push({\r\n                                oldValue: diff[options._const.to] + diff.groupLength,\r\n                                newValue: map.newValue + map.length - splitLength,\r\n                                length: splitLength\r\n                            })\r\n                            map.length -= splitLength\r\n                        }\r\n                    } else if (map.oldValue === diff[options._const.from]) {\r\n                        map.oldValue = diff[options._const.to]\r\n                    }\r\n                })\r\n            }\r\n\r\n            break\r\n        case options._const.removeElement:\r\n            parentNode.childNodes.splice(nodeIndex, 1)\r\n            if (parentNode.subsets) {\r\n                parentNode.subsets.forEach(map => {\r\n                    if (map.oldValue > nodeIndex) {\r\n                        map.oldValue -= 1\r\n                    } else if (map.oldValue === nodeIndex) {\r\n                        map.delete = true\r\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\r\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\r\n                            map.length--\r\n                        } else {\r\n                            newSubsets.push({\r\n                                newValue: map.newValue + nodeIndex - map.oldValue,\r\n                                oldValue: nodeIndex,\r\n                                length: map.length - nodeIndex + map.oldValue - 1\r\n                            })\r\n                            map.length = nodeIndex - map.oldValue\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            node = parentNode\r\n            break\r\n        case options._const.addElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            node = getFromVirtualRoute(tree, route).node\r\n            newNode = cloneObj(diff[options._const.element])\r\n            newNode.outerDone = true\r\n            newNode.innerDone = true\r\n            newNode.valueDone = true\r\n\r\n            if (!node.childNodes) {\r\n                node.childNodes = []\r\n            }\r\n\r\n            if (c >= node.childNodes.length) {\r\n                node.childNodes.push(newNode)\r\n            } else {\r\n                node.childNodes.splice(c, 0, newNode)\r\n            }\r\n            if (node.subsets) {\r\n                node.subsets.forEach(map => {\r\n                    if (map.oldValue >= c) {\r\n                        map.oldValue += 1\r\n                    } else if (map.oldValue < c && (map.oldValue + map.length) > c) {\r\n                        const splitLength = map.oldValue + map.length - c\r\n                        newSubsets.push({\r\n                            newValue: map.newValue + map.length - splitLength,\r\n                            oldValue: c + 1,\r\n                            length: splitLength\r\n                        })\r\n                        map.length -= splitLength\r\n                    }\r\n                })\r\n            }\r\n            break\r\n        case options._const.removeTextElement:\r\n            parentNode.childNodes.splice(nodeIndex, 1)\r\n            if (parentNode.nodeName === 'TEXTAREA') {\r\n                delete parentNode.value\r\n            }\r\n            if (parentNode.subsets) {\r\n                parentNode.subsets.forEach(map => {\r\n                    if (map.oldValue > nodeIndex) {\r\n                        map.oldValue -= 1\r\n                    } else if (map.oldValue === nodeIndex) {\r\n                        map.delete = true\r\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\r\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\r\n                            map.length--\r\n                        } else {\r\n                            newSubsets.push({\r\n                                newValue: map.newValue + nodeIndex - map.oldValue,\r\n                                oldValue: nodeIndex,\r\n                                length: map.length - nodeIndex + map.oldValue - 1\r\n                            })\r\n                            map.length = nodeIndex - map.oldValue\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            node = parentNode\r\n            break\r\n        case options._const.addTextElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            newNode = {}\r\n            newNode.nodeName = '#text'\r\n            newNode.data = diff[options._const.value]\r\n            node = getFromVirtualRoute(tree, route).node\r\n            if (!node.childNodes) {\r\n                node.childNodes = []\r\n            }\r\n\r\n            if (c >= node.childNodes.length) {\r\n                node.childNodes.push(newNode)\r\n            } else {\r\n                node.childNodes.splice(c, 0, newNode)\r\n            }\r\n            if (node.nodeName === 'TEXTAREA') {\r\n                node.value = diff[options._const.newValue]\r\n            }\r\n            if (node.subsets) {\r\n                node.subsets.forEach(map => {\r\n                    if (map.oldValue >= c) {\r\n                        map.oldValue += 1\r\n                    }\r\n                    if (map.oldValue < c && (map.oldValue + map.length) > c) {\r\n                        const splitLength = map.oldValue + map.length - c\r\n                        newSubsets.push({\r\n                            newValue: map.newValue + map.length - splitLength,\r\n                            oldValue: c + 1,\r\n                            length: splitLength\r\n                        })\r\n                        map.length -= splitLength\r\n                    }\r\n                })\r\n            }\r\n            break\r\n        default:\r\n            console.log('unknown action')\r\n    }\r\n\r\n    if (node.subsets) {\r\n        node.subsets = node.subsets.filter(map => !map.delete && map.oldValue !== map.newValue)\r\n        if (newSubsets.length) {\r\n            node.subsets = node.subsets.concat(newSubsets)\r\n        }\r\n    }\r\n\r\n    // capture newNode for the callback\r\n    info.newNode = newNode\r\n    options.postVirtualDiffApply(info)\r\n\r\n    return\r\n}\r\n\r\nexport function applyVirtual(tree, diffs, options) {\r\n    diffs.forEach(diff => {\r\n        applyVirtualDiff(tree, diff, options)\r\n    })\r\n    return true\r\n}\r\n","export function nodeToObj(aNode, options = {}) {\r\n    const objNode = {}\r\n    objNode.nodeName = aNode.nodeName\r\n    if (objNode.nodeName === '#text' || objNode.nodeName === '#comment') {\r\n        objNode.data = aNode.data\r\n    } else {\r\n        if (aNode.attributes && aNode.attributes.length > 0) {\r\n            objNode.attributes = {}\r\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\r\n            nodeArray.forEach(attribute => objNode.attributes[attribute.name] = attribute.value)\r\n        }\r\n        if (objNode.nodeName === 'TEXTAREA') {\r\n            objNode.value = aNode.value\r\n        } else if (aNode.childNodes && aNode.childNodes.length > 0) {\r\n            objNode.childNodes = []\r\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\r\n            nodeArray.forEach(childNode => objNode.childNodes.push(nodeToObj(childNode, options)))\r\n        }\r\n        if (options.valueDiffing) {\r\n            if (aNode.checked !== undefined && aNode.type && ['radio', 'checkbox'].includes(aNode.type.toLowerCase())) {\r\n                objNode.checked = aNode.checked\r\n            } else if (aNode.value !== undefined) {\r\n                objNode.value = aNode.value\r\n            }\r\n            if (aNode.selected !== undefined) {\r\n                objNode.selected = aNode.selected\r\n            }\r\n        }\r\n    }\r\n    return objNode\r\n}\r\n","// from html-parse-stringify (MIT)\r\n\r\nconst tagRE = /<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>/g\r\n// re-used obj for quick lookups of components\r\nconst empty = Object.create ? Object.create(null) : {}\r\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\r\n\r\n\r\nfunction unescape(string) {\r\n    return string.replace(/&lt;/g, '<').replace(/&gt;/g, '>')\r\n.replace(/&amp;/g, '&')\r\n}\r\n\r\n// create optimized lookup object for\r\n// void elements as listed here:\r\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\r\nconst lookup = {\r\n    area: true,\r\n    base: true,\r\n    br: true,\r\n    col: true,\r\n    embed: true,\r\n    hr: true,\r\n    img: true,\r\n    input: true,\r\n    keygen: true,\r\n    link: true,\r\n    menuItem: true,\r\n    meta: true,\r\n    param: true,\r\n    source: true,\r\n    track: true,\r\n    wbr: true\r\n}\r\n\r\n\r\nfunction parseTag(tag) {\r\n    const res = {\r\n        nodeName: '',\r\n        attributes: {}\r\n    }\r\n\r\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\r\n    if (tagMatch) {\r\n        res.nodeName = tagMatch[1]\r\n        if (lookup[tagMatch[1].toLowerCase()] || tag.charAt(tag.length - 2) === '/') {\r\n            res.voidElement = true\r\n        }\r\n\r\n        // handle comment tag\r\n        if (res.nodeName.startsWith('!--')) {\r\n            const endIndex = tag.indexOf('-->')\r\n            return {\r\n                type: 'comment',\r\n                data: endIndex !== -1 ? tag.slice(4, endIndex) : ''\r\n            }\r\n        }\r\n    }\r\n\r\n    let reg = new RegExp(attrRE)\r\n    let result = null\r\n    let done = false\r\n    while (!done) {\r\n        result = reg.exec(tag)\r\n\r\n        if (result === null) {\r\n            done = true\r\n        } else if (result[0].trim()) {\r\n            if (result[1]) {\r\n                let attr = result[1].trim()\r\n                let arr = [attr, \"\"]\r\n\r\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\r\n\r\n                res.attributes[arr[0]] = arr[1]\r\n                reg.lastIndex--\r\n            } else if (result[2]) res.attributes[result[2]] = result[3].trim().substring(1, result[3].length - 1)\r\n        }\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nfunction parse(\r\n    html,\r\n    options = {components: empty}\r\n) {\r\n    const result = []\r\n    let current\r\n    let level = -1\r\n    const arr = []\r\n    let inComponent = false\r\n\r\n    html.replace(tagRE, (tag, index) => {\r\n        if (inComponent) {\r\n            if (tag !== (`</${current.nodeName}>`)) {\r\n                return\r\n            } else {\r\n                inComponent = false\r\n            }\r\n        }\r\n        const isOpen = tag.charAt(1) !== '/'\r\n        const isComment = tag.startsWith('<!--')\r\n        const start = index + tag.length\r\n        const nextChar = html.charAt(start)\r\n        let parent\r\n\r\n        if (isComment) {\r\n            const comment = parseTag(tag)\r\n\r\n            // if we're at root, push new base node\r\n            if (level < 0) {\r\n                result.push(comment)\r\n                return result\r\n            }\r\n            parent = arr[level]\r\n            if (parent) {\r\n                if (!parent.childNodes) {\r\n                    parent.childNodes = []\r\n                }\r\n                parent.childNodes.push(comment)\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        if (isOpen) {\r\n            current = parseTag(tag)\r\n            level++\r\n            if (current.type === 'tag' && options.components[current.nodeName]) {\r\n                current.type = 'component'\r\n                inComponent = true\r\n            }\r\n\r\n            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {\r\n                if (!current.childNodes) {\r\n                    current.childNodes = []\r\n                }\r\n                current.childNodes.push({\r\n                    nodeName: '#text',\r\n                    data: unescape(html.slice(start, html.indexOf('<', start)))\r\n                })\r\n            }\r\n\r\n            // if we're at root, push new base node\r\n            if (level === 0) {\r\n                result.push(current)\r\n            }\r\n\r\n            parent = arr[level - 1]\r\n\r\n            if (parent) {\r\n                if (!parent.childNodes) {\r\n                    parent.childNodes = []\r\n                }\r\n                parent.childNodes.push(current)\r\n            }\r\n\r\n            arr[level] = current\r\n        }\r\n\r\n        if (!isOpen || current.voidElement) {\r\n            level--\r\n            if (!inComponent && nextChar !== '<' && nextChar) {\r\n                // trailing text node\r\n                // if we're at the root, push a base text node. otherwise add as\r\n                // a child to the current node.\r\n                parent = level === -1 ? result : arr[level].childNodes || []\r\n\r\n                // calculate correct end of the data slice in case there's\r\n                // no tag after the text node.\r\n                const end = html.indexOf('<', start)\r\n                const data = unescape(html.slice(start, end === -1 ? undefined : end))\r\n                parent.push({\r\n                    nodeName: '#text',\r\n                    data\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return result[0]\r\n}\r\n\r\nfunction cleanObj(obj) {\r\n    delete obj.voidElement\r\n    if (obj.childNodes) {\r\n        obj.childNodes.forEach(child => cleanObj(child))\r\n    }\r\n    return obj\r\n}\r\n\r\nexport function stringToObj(string) {\r\n    return cleanObj(parse(string))\r\n}\r\n","import {Diff, DiffTracker, cloneObj, getGapInformation, isEqual, markSubTrees, removeDone, roughlyEqual} from \"./helpers\"\r\nimport {applyVirtual} from \"./apply\"\r\nimport {nodeToObj} from \"./fromDOM\"\r\nimport {stringToObj} from \"./fromString\"\r\n\r\n// ===== Create a diff =====\r\n\r\nexport class DiffFinder {\r\n    constructor(t1Node, t2Node, options) {\r\n        this.options = options\r\n        this.t1 = (t1Node instanceof HTMLElement) ? nodeToObj(t1Node, this.options) : (typeof t1Node === 'string') ? stringToObj(t1Node, this.options) : JSON.parse(JSON.stringify(t1Node))\r\n        this.t2 = (t2Node instanceof HTMLElement) ? nodeToObj(t2Node, this.options) : (typeof t2Node === 'string') ? stringToObj(t2Node, this.options) : JSON.parse(JSON.stringify(t2Node))\r\n        this.diffcount = 0\r\n        this.foundAll = false\r\n        if (this.debug) {\r\n            this.t1Orig = nodeToObj(t1Node, this.options)\r\n            this.t2Orig = nodeToObj(t2Node, this.options)\r\n        }\r\n\r\n        this.tracker = new DiffTracker()\r\n    }\r\n\r\n    init() {\r\n        return this.findDiffs(this.t1, this.t2)\r\n    }\r\n\r\n    findDiffs(t1, t2) {\r\n        let diffs\r\n        do {\r\n            if (this.options.debug) {\r\n                this.diffcount += 1\r\n                if (this.diffcount > this.options.diffcap) {\r\n                    window.diffError = [this.t1Orig, this.t2Orig]\r\n                    throw new Error(`surpassed diffcap:${JSON.stringify(this.t1Orig)} -> ${JSON.stringify(this.t2Orig)}`)\r\n                }\r\n            }\r\n            diffs = this.findNextDiff(t1, t2, [])\r\n\r\n            if (diffs.length === 0) {\r\n                // Last check if the elements really are the same now.\r\n                // If not, remove all info about being done and start over.\r\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\r\n                if (!isEqual(t1, t2)) {\r\n                    if (this.foundAll) {\r\n                        console.error('Could not find remaining diffs!')\r\n                    } else {\r\n                        this.foundAll = true\r\n                        removeDone(t1)\r\n                        diffs = this.findNextDiff(t1, t2, [])\r\n                    }\r\n                }\r\n            }\r\n            if (diffs.length > 0) {\r\n                this.foundAll = false\r\n                this.tracker.add(diffs)\r\n                applyVirtual(t1, diffs, this.options)\r\n            }\r\n        } while (diffs.length > 0)\r\n\r\n        return this.tracker.list\r\n    }\r\n\r\n    findNextDiff(t1, t2, route) {\r\n        let diffs\r\n        let fdiffs\r\n\r\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\r\n            return []\r\n        }\r\n        // outer differences?\r\n        if (!t1.outerDone) {\r\n            diffs = this.findOuterDiff(t1, t2, route)\r\n            if (this.options.filterOuterDiff) {\r\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\r\n                if (fdiffs) diffs = fdiffs\r\n            }\r\n            if (diffs.length > 0) {\r\n                t1.outerDone = true\r\n                return diffs\r\n            } else {\r\n                t1.outerDone = true\r\n            }\r\n        }\r\n        // inner differences?\r\n        if (!t1.innerDone) {\r\n            diffs = this.findInnerDiff(t1, t2, route)\r\n            if (diffs.length > 0) {\r\n                return diffs\r\n            } else {\r\n                t1.innerDone = true\r\n            }\r\n        }\r\n\r\n        if (this.options.valueDiffing && !t1.valueDone) {\r\n            // value differences?\r\n            diffs = this.findValueDiff(t1, t2, route)\r\n\r\n            if (diffs.length > 0) {\r\n                t1.valueDone = true\r\n                return diffs\r\n            } else {\r\n                t1.valueDone = true\r\n            }\r\n        }\r\n\r\n        // no differences\r\n        return []\r\n    }\r\n\r\n    findOuterDiff(t1, t2, route) {\r\n        const diffs = []\r\n        let attr\r\n        let attr1\r\n        let attr2\r\n        let attrLength\r\n        let pos\r\n        let i\r\n        if (t1.nodeName !== t2.nodeName) {\r\n            if (!route.length) {\r\n                throw new Error('Top level nodes have to be of the same kind.')\r\n            }\r\n            return [new Diff()\r\n                .setValue(this.options._const.action, this.options._const.replaceElement)\r\n                .setValue(this.options._const.oldValue, cloneObj(t1))\r\n                .setValue(this.options._const.newValue, cloneObj(t2))\r\n                .setValue(this.options._const.route, route)\r\n            ]\r\n        }\r\n        if (route.length && this.options.maxNodeDiffCount < Math.abs((t1.childNodes || []).length - (t2.childNodes || []).length)) {\r\n            return [new Diff()\r\n                .setValue(this.options._const.action, this.options._const.replaceElement)\r\n                .setValue(this.options._const.oldValue, cloneObj(t1))\r\n                .setValue(this.options._const.newValue, cloneObj(t2))\r\n                .setValue(this.options._const.route, route)\r\n            ]\r\n        }\r\n\r\n        if (t1.data !== t2.data) {\r\n            // Comment or text node.\r\n            if (t1.nodeName === '#text') {\r\n                return [new Diff()\r\n                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\r\n                    .setValue(this.options._const.route, route)\r\n                    .setValue(this.options._const.oldValue, t1.data)\r\n                    .setValue(this.options._const.newValue, t2.data)\r\n                ]\r\n            } else {\r\n                return [new Diff()\r\n                    .setValue(this.options._const.action, this.options._const.modifyComment)\r\n                    .setValue(this.options._const.route, route)\r\n                    .setValue(this.options._const.oldValue, t1.data)\r\n                    .setValue(this.options._const.newValue, t2.data)\r\n                ]\r\n            }\r\n\r\n        }\r\n\r\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\r\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\r\n\r\n        attrLength = attr1.length\r\n        for (i = 0; i < attrLength; i++) {\r\n            attr = attr1[i]\r\n            pos = attr2.indexOf(attr)\r\n            if (pos === -1) {\r\n                diffs.push(new Diff()\r\n                    .setValue(this.options._const.action, this.options._const.removeAttribute)\r\n                    .setValue(this.options._const.route, route)\r\n                    .setValue(this.options._const.name, attr)\r\n                    .setValue(this.options._const.value, t1.attributes[attr])\r\n                )\r\n            } else {\r\n                attr2.splice(pos, 1)\r\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.modifyAttribute)\r\n                        .setValue(this.options._const.route, route)\r\n                        .setValue(this.options._const.name, attr)\r\n                        .setValue(this.options._const.oldValue, t1.attributes[attr])\r\n                        .setValue(this.options._const.newValue, t2.attributes[attr])\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        attrLength = attr2.length\r\n        for (i = 0; i < attrLength; i++) {\r\n            attr = attr2[i]\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.addAttribute)\r\n                .setValue(this.options._const.route, route)\r\n                .setValue(this.options._const.name, attr)\r\n                .setValue(this.options._const.value, t2.attributes[attr])\r\n            )\r\n        }\r\n\r\n        return diffs\r\n    }\r\n\r\n    findInnerDiff(t1, t2, route) {\r\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\r\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\r\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\r\n        let childNodesLengthDifference = Math.abs(t1ChildNodes.length - t2ChildNodes.length)\r\n        let diffs = []\r\n        let index = 0\r\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\r\n            const subtrees = t1.subsets && t1.subsetsAge-- ? t1.subsets : (t1.childNodes && t2.childNodes) ? markSubTrees(t1, t2) : []\r\n\r\n            if (subtrees.length > 0) {\r\n                /* One or more groups have been identified among the childnodes of t1\r\n                 * and t2.\r\n                 */\r\n                diffs = this.attemptGroupRelocation(t1, t2, subtrees, route)\r\n                if (diffs.length > 0) {\r\n                    return diffs\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /* 0 or 1 groups of similar child nodes have been found\r\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\r\n         * contents are the same. When the number of groups is below 2,\r\n         * t1 and t2 are made to have the same length and each of the\r\n         * pairs of child nodes are diffed.\r\n         */\r\n\r\n        for (let i = 0; i < last; i += 1) {\r\n            const e1 = t1ChildNodes[i]\r\n            const e2 = t2ChildNodes[i]\r\n\r\n            if (childNodesLengthDifference) {\r\n                /* t1 and t2 have different amounts of childNodes. Add\r\n                 * and remove as necessary to obtain the same length */\r\n                if (e1 && !e2) {\r\n                    if (e1.nodeName === '#text') {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.value, e1.data)\r\n                        )\r\n                        index -= 1\r\n                    } else {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.removeElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.element, cloneObj(e1))\r\n                        )\r\n                        index -= 1\r\n                    }\r\n\r\n                } else if (e2 && !e1) {\r\n                    if (e2.nodeName === '#text') {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.addTextElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.value, e2.data)\r\n                        )\r\n                    } else {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.addElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.element, cloneObj(e2))\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            /* We are now guaranteed that childNodes e1 and e2 exist,\r\n             * and that they can be diffed.\r\n             */\r\n            /* Diffs in child nodes should not affect the parent node,\r\n             * so we let these diffs be submitted together with other\r\n             * diffs.\r\n             */\r\n\r\n            if (e1 && e2) {\r\n                if (!this.options.maxChildCount || last < this.options.maxChildCount) {\r\n                    diffs = diffs.concat(this.findNextDiff(e1, e2, route.concat(index)))\r\n                } else if (!isEqual(e1, e2)) {\r\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\r\n                        if (e1.nodeName === '#text') {\r\n                            diffs.push(new Diff()\r\n                                .setValue(this.options._const.action, this.options._const.removeTextElement)\r\n                                .setValue(this.options._const.route, route.concat(index))\r\n                                .setValue(this.options._const.value, e1.data)\r\n                            )\r\n                        } else {\r\n                            diffs.push(\r\n                                new Diff()\r\n                                    .setValue(this.options._const.action, this.options._const.removeElement)\r\n                                    .setValue(this.options._const.element, cloneObj(e1))\r\n                                    .setValue(this.options._const.route, route.concat(index))\r\n                            )\r\n                        }\r\n                        t1ChildNodes.splice(i, 1)\r\n                        i -= 1\r\n                        index -= 1\r\n\r\n                        childNodesLengthDifference -= 1\r\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\r\n                        diffs = diffs.concat([\r\n                            new Diff()\r\n                                .setValue(this.options._const.action, this.options._const.addElement)\r\n                                .setValue(this.options._const.element, cloneObj(e2))\r\n                                .setValue(this.options._const.route, route.concat(index))\r\n                        ])\r\n                        t1ChildNodes.splice(i, 0, {})\r\n                        childNodesLengthDifference -= 1\r\n                    } else {\r\n                        diffs = diffs.concat([\r\n                            new Diff()\r\n                                .setValue(this.options._const.action, this.options._const.replaceElement)\r\n                                .setValue(this.options._const.oldValue, cloneObj(e1))\r\n                                .setValue(this.options._const.newValue, cloneObj(e2))\r\n                                .setValue(this.options._const.route, route.concat(index))\r\n                        ])\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            index += 1\r\n\r\n        }\r\n        t1.innerDone = true\r\n        return diffs\r\n    }\r\n\r\n    attemptGroupRelocation(t1, t2, subtrees, route) {\r\n        /* Either t1.childNodes and t2.childNodes have the same length, or\r\n         * there are at least two groups of similar elements can be found.\r\n         * attempts are made at equalizing t1 with t2. First all initial\r\n         * elements with no group affiliation (gaps=true) are removed (if\r\n         * only in t1) or added (if only in t2). Then the creation of a group\r\n         * relocation diff is attempted.\r\n         */\r\n        const gapInformation = getGapInformation(t1, t2, subtrees)\r\n        const gaps1 = gapInformation.gaps1\r\n        const gaps2 = gapInformation.gaps2\r\n        let shortest = Math.min(gaps1.length, gaps2.length)\r\n        let destinationDifferent\r\n        let toGroup\r\n        let group\r\n        let node\r\n        let similarNode\r\n        let testI\r\n        const diffs = []\r\n\r\n\r\n        for (let index2 = 0, index1 = 0; index2 < shortest; index1 += 1, index2 += 1) {\r\n            if (gaps1[index2] === true) {\r\n                node = t1.childNodes[index1]\r\n                if (node.nodeName === '#text') {\r\n                    if (t2.childNodes[index2].nodeName === '#text') {\r\n                        if (node.data !== t2.childNodes[index2].data) {\r\n                            testI = index1\r\n                            while (t1.childNodes.length > testI + 1 && t1.childNodes[testI + 1].nodeName === '#text') {\r\n                                testI += 1\r\n                                if (t2.childNodes[index2].data === t1.childNodes[testI].data) {\r\n                                    similarNode = true\r\n                                    break\r\n                                }\r\n                            }\r\n                            if (!similarNode) {\r\n                                diffs.push(new Diff()\r\n                                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\r\n                                    .setValue(this.options._const.route, route.concat(index2))\r\n                                    .setValue(this.options._const.oldValue, node.data)\r\n                                    .setValue(this.options._const.newValue, t2.childNodes[index2].data)\r\n                                )\r\n                                return diffs\r\n                            }\r\n                        }\r\n                    } else {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\r\n                            .setValue(this.options._const.route, route.concat(index2))\r\n                            .setValue(this.options._const.value, node.data)\r\n                        )\r\n                        gaps1.splice(index2, 1)\r\n                        shortest = Math.min(gaps1.length, gaps2.length)\r\n                        index2 -= 1\r\n                    }\r\n                } else {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.removeElement)\r\n                        .setValue(this.options._const.route, route.concat(index2))\r\n                        .setValue(this.options._const.element, cloneObj(node))\r\n                    )\r\n                    gaps1.splice(index2, 1)\r\n                    shortest = Math.min(gaps1.length, gaps2.length)\r\n                    index2 -= 1\r\n                }\r\n\r\n            } else if (gaps2[index2] === true) {\r\n                node = t2.childNodes[index2]\r\n                if (node.nodeName === '#text') {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.addTextElement)\r\n                        .setValue(this.options._const.route, route.concat(index2))\r\n                        .setValue(this.options._const.value, node.data)\r\n                    )\r\n                    gaps1.splice(index2, 0, true)\r\n                    shortest = Math.min(gaps1.length, gaps2.length)\r\n                    index1 -= 1\r\n                } else {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.addElement)\r\n                        .setValue(this.options._const.route, route.concat(index2))\r\n                        .setValue(this.options._const.element, cloneObj(node))\r\n                    )\r\n                    gaps1.splice(index2, 0, true)\r\n                    shortest = Math.min(gaps1.length, gaps2.length)\r\n                    index1 -= 1\r\n                }\r\n\r\n            } else if (gaps1[index2] !== gaps2[index2]) {\r\n                if (diffs.length > 0) {\r\n                    return diffs\r\n                }\r\n                // group relocation\r\n                group = subtrees[gaps1[index2]]\r\n                toGroup = Math.min(group.newValue, (t1.childNodes.length - group.length))\r\n                if (toGroup !== group.oldValue) {\r\n                    // Check whether destination nodes are different than originating ones.\r\n                    destinationDifferent = false\r\n                    for (let j = 0; j < group.length; j += 1) {\r\n                        if (!roughlyEqual(t1.childNodes[toGroup + j], t1.childNodes[group.oldValue + j], [], false, true)) {\r\n                            destinationDifferent = true\r\n                        }\r\n                    }\r\n                    if (destinationDifferent) {\r\n                        return [new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.relocateGroup)\r\n                            .setValue('groupLength', group.length)\r\n                            .setValue(this.options._const.from, group.oldValue)\r\n                            .setValue(this.options._const.to, toGroup)\r\n                            .setValue(this.options._const.route, route)\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return diffs\r\n    }\r\n\r\n    findValueDiff(t1, t2, route) {\r\n        // Differences of value. Only useful if the value/selection/checked value\r\n        // differs from what is represented in the DOM. For example in the case\r\n        // of filled out forms, etc.\r\n        const diffs = []\r\n\r\n        if (t1.selected !== t2.selected) {\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.modifySelected)\r\n                .setValue(this.options._const.oldValue, t1.selected)\r\n                .setValue(this.options._const.newValue, t2.selected)\r\n                .setValue(this.options._const.route, route)\r\n            )\r\n        }\r\n\r\n        if ((t1.value || t2.value) && t1.value !== t2.value && t1.nodeName !== 'OPTION') {\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.modifyValue)\r\n                .setValue(this.options._const.oldValue, t1.value || \"\")\r\n                .setValue(this.options._const.newValue, t2.value || \"\")\r\n                .setValue(this.options._const.route, route)\r\n            )\r\n        }\r\n        if (t1.checked !== t2.checked) {\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.modifyChecked)\r\n                .setValue(this.options._const.oldValue, t1.checked)\r\n                .setValue(this.options._const.newValue, t2.checked)\r\n                .setValue(this.options._const.route, route)\r\n            )\r\n        }\r\n\r\n        return diffs\r\n    }\r\n\r\n}\r\n","import {applyDOM, undoDOM} from \"./dom/index\"\r\nimport {DiffFinder} from \"./virtual/index\"\r\nexport {nodeToObj, stringToObj} from \"./virtual/index\"\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    debug: false,\r\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\r\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\r\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\r\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\r\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\r\n    textDiff(node, currentValue, expectedValue, newValue) {\r\n        node.data = newValue\r\n        return\r\n    },\r\n    // empty functions were benchmarked as running faster than both\r\n    // `f && f()` and `if (f) { f(); }`\r\n    preVirtualDiffApply() {},\r\n    postVirtualDiffApply() {},\r\n    preDiffApply() {},\r\n    postDiffApply() {},\r\n    filterOuterDiff: null,\r\n    compress: false, // Whether to work with compressed diffs\r\n    _const: false, // object with strings for every change types to be used in diffs.\r\n    document: window && window.document ? window.document : false\r\n}\r\n\r\n\r\nexport class DiffDOM {\r\n    constructor(options = {}) {\r\n\r\n        this.options = options\r\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\r\n        // by default, so this is the safest way of doing it currently.\r\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\r\n            if (!Object.prototype.hasOwnProperty.call(this.options, key)) {\r\n                this.options[key] = value\r\n            }\r\n        })\r\n\r\n        if (!this.options._const) {\r\n            const varNames = [\"addAttribute\", \"modifyAttribute\", \"removeAttribute\",\r\n                \"modifyTextElement\", \"relocateGroup\", \"removeElement\", \"addElement\",\r\n                \"removeTextElement\", \"addTextElement\", \"replaceElement\", \"modifyValue\",\r\n                \"modifyChecked\", \"modifySelected\", \"modifyComment\", \"action\", \"route\",\r\n                \"oldValue\", \"newValue\", \"element\", \"group\", \"from\", \"to\", \"name\",\r\n                \"value\", \"data\", \"attributes\", \"nodeName\", \"childNodes\", \"checked\",\r\n                \"selected\"\r\n            ]\r\n            this.options._const = {}\r\n            if (this.options.compress) {\r\n                varNames.forEach((varName, index) => this.options._const[varName] = index)\r\n            } else {\r\n                varNames.forEach(varName => this.options._const[varName] = varName)\r\n            }\r\n        }\r\n\r\n        this.DiffFinder = DiffFinder\r\n\r\n    }\r\n\r\n    apply(tree, diffs) {\r\n        return applyDOM(tree, diffs, this.options)\r\n    }\r\n\r\n    undo(tree, diffs) {\r\n        return undoDOM(tree, diffs, this.options)\r\n    }\r\n\r\n    diff(t1Node, t2Node) {\r\n        const finder = new this.DiffFinder(t1Node, t2Node, this.options)\r\n        return finder.init()\r\n    }\r\n\r\n}\r\n","/**\r\n * Use TraceLogger to figure out function calls inside\r\n * JS objects by wrapping an object with a TraceLogger\r\n * instance.\r\n *\r\n * Pretty-prints the call trace (using unicode box code)\r\n * when tracelogger.toString() is called.\r\n */\r\n\r\n/**\r\n * Wrap an object by calling new TraceLogger(obj)\r\n *\r\n * If you're familiar with Python decorators, this\r\n * does roughly the same thing, adding pre/post\r\n * call hook logging calls so that you can see\r\n * what's going on.\r\n */\r\nexport class TraceLogger {\r\n    constructor(obj = {}) {\r\n        this.pad = \"│   \"\r\n        this.padding = \"\"\r\n        this.tick = 1\r\n        this.messages = []\r\n        const wrapkey = (obj, key) => {\r\n            // trace this function\r\n            const oldfn = obj[key]\r\n            obj[key] = (...args) => {\r\n                this.fin(key, Array.prototype.slice.call(args))\r\n                const result = oldfn.apply(obj, args)\r\n                this.fout(key, result)\r\n                return result\r\n            }\r\n        }\r\n        // can't use Object.keys for prototype walking\r\n        for (let key in obj) {\r\n            if (typeof obj[key] === \"function\") {\r\n                wrapkey(obj, key)\r\n            }\r\n        }\r\n        this.log(\"┌ TRACELOG START\")\r\n    }\r\n    // called when entering a function\r\n    fin(fn, args) {\r\n        this.padding += this.pad\r\n        this.log(`├─> entering ${fn}`, args)\r\n    }\r\n    // called when exiting a function\r\n    fout(fn, result) {\r\n        this.log(\"│<──┘ generated return value\", result)\r\n        this.padding = this.padding.substring(0, this.padding.length - this.pad.length)\r\n    }\r\n    // log message formatting\r\n    format(s, tick) {\r\n        let nf = function(t) {\r\n            t = `${t}`\r\n            while (t.length < 4) {\r\n                t = `0${t}`\r\n            }\r\n            return t\r\n        }\r\n        return `${nf(tick)}> ${this.padding}${s}`\r\n    }\r\n    // log a trace message\r\n    log() {\r\n        let s = Array.prototype.slice.call(arguments)\r\n        const stringCollapse = function(v) {\r\n            if (!v) {\r\n                return \"<falsey>\"\r\n            }\r\n            if (typeof v === \"string\") {\r\n                return v\r\n            }\r\n            if (v instanceof HTMLElement) {\r\n                return v.outerHTML || \"<empty>\"\r\n            }\r\n            if (v instanceof Array) {\r\n                return `[${v.map(stringCollapse).join(\",\")}]`\r\n            }\r\n            return v.toString() || v.valueOf() || \"<unknown>\"\r\n        }\r\n        s = s.map(stringCollapse).join(\", \")\r\n        this.messages.push(this.format(s, this.tick++))\r\n    }\r\n    // turn the log into a structured string with\r\n    // unicode box codes to make it a sensible trace.\r\n    toString() {\r\n        let cap = \"×   \"\r\n        let terminator = \"└───\"\r\n        while (terminator.length <= this.padding.length + this.pad.length) {\r\n            terminator += cap\r\n        }\r\n        let _ = this.padding\r\n        this.padding = \"\"\r\n        terminator = this.format(terminator, this.tick)\r\n        this.padding = _\r\n        return `${this.messages.join(\"\\n\")}\\n${terminator}`\r\n    }\r\n}\r\n"],"names":["objToNode","objNode","insideSvg","options","let","node","nodeName","document","createTextNode","data","createComment","createElementNS","toLowerCase","createElement","attributes","Object","entries","forEach","setAttribute","key","value","childNodes","childNode","appendChild","valueDiffing","checked","selected","getFromRoute","route","slice","length","const","c","splice","applyDiff","tree","diff","newNode","reference","_const","info","preDiffApply","action","addAttribute","name","modifyAttribute","newValue","removeAttribute","modifyTextElement","nodeType","textDiff","oldValue","modifyValue","modifyComment","modifyChecked","modifySelected","replaceElement","parentNode","replaceChild","namespaceURI","relocateGroup","Array","groupLength","map","removeChild","from","index","to","insertBefore","removeElement","addElement","element","removeTextElement","addTextElement","console","log","postDiffApply","swap","obj","p1","p2","tmp","undoDOM","diffs","reverse","undoDiff","Diff","this","elementDescriptors","el","output","push","replace","id","findUniqueDescriptors","li","uniqueDescriptors","duplicateDescriptors","descriptor","inUnique","uniqueInBoth","l1","l2","l1Unique","l2Unique","inBoth","keys","removeDone","outerDone","innerDone","valueDone","every","isEqual","e1","e2","Boolean","e1Attributes","e2Attributes","attribute","roughlyEqual","sameSiblings","preventRecursion","nodeList1","nodeList2","childUniqueDescriptors","cloneObj","JSON","parse","stringify","findCommonSubsets","c1","c2","marked1","marked2","lcsSize","c1Length","c2Length","matches","subsetsSame","some","i","c1Desc","c2Desc","description","c1Index","c1Element","c2Index","c2Element","makeArray","n","v","toString","setValue","aKey","aValue","DiffTracker","list","getFromVirtualRoute","nodeIndex","applyVirtual","routeInfo","newSubsets","preVirtualDiffApply","movedNode","subsets","splitLength","delete","filter","concat","postVirtualDiffApply","applyVirtualDiff","nodeToObj","aNode","prototype","call","undefined","type","includes","add","fn","tagRE","empty","create","attrRE","unescape","string","lookup","area","base","br","col","embed","hr","img","input","keygen","link","menuItem","meta","param","source","track","wbr","parseTag","tag","res","tagMatch","match","charAt","voidElement","startsWith","endIndex","indexOf","reg","RegExp","result","done","exec","trim","attr","arr","split","lastIndex","substring","stringToObj","cleanObj","child","html","components","current","level","inComponent","parent","isOpen","isComment","start","nextChar","comment","end","DiffFinder","t1Node","t2Node","t1","HTMLElement","t2","diffcount","foundAll","debug","t1Orig","t2Orig","tracker","init","findDiffs","diffcap","window","diffError","Error","findNextDiff","error","fdiffs","maxDepth","findOuterDiff","filterOuterDiff","findInnerDiff","findValueDiff","attr1","attr2","attrLength","pos","maxNodeDiffCount","Math","abs","sort","t1ChildNodes","t2ChildNodes","last","max","childNodesLengthDifference","maxChildCount","subtrees","subsetsAge","oldTree","newTree","oldChildren","newChildren","subset","returnIndex","arguments","item","markSubTrees","attemptGroupRelocation","destinationDifferent","toGroup","group","similarNode","testI","gapInformation","stable","gaps1","gaps2","endOld","endNew","j","getGapInformation","shortest","min","index2","index1","DEFAULT_OPTIONS","currentValue","expectedValue","compress","DiffDOM","hasOwnProperty","varNames","varName","apply","applyDOM","undo","TraceLogger","pad","padding","tick","messages","wrapkey","oldfn","fin","args","fout","format","s","t","stringCollapse","outerHTML","join","valueOf","terminator","_"],"mappings":"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"}