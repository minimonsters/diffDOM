{"version":3,"file":"diffDOM.js","sources":["../src/diffDOM/dom/fromVirtual.js","../src/diffDOM/dom/apply.js","../src/diffDOM/dom/undo.js","../src/diffDOM/virtual/helpers.js","../src/diffDOM/virtual/apply.js","../src/diffDOM/virtual/fromDOM.js","../src/diffDOM/virtual/fromString.js","../src/diffDOM/virtual/diff.js","../src/diffDOM/index.js","../src/TraceLogger.js"],"sourcesContent":["export function objToNode(objNode, insideSvg, options) {\r\n    let node\r\n    if (objNode.nodeName === '#text') {\r\n        node = options.document.createTextNode(objNode.data)\r\n\r\n    } else if (objNode.nodeName === '#comment') {\r\n        node = options.document.createComment(objNode.data)\r\n    } else {\r\n        if (insideSvg) {\r\n            if (objNode.nodeName === 'foreignObject') {\r\n                insideSvg = false;\r\n                node = options.document.createElementNS(objNode.nodeName)\r\n            } else {\r\n                node = options.document.createElementNS('http://www.w3.org/2000/svg', objNode.nodeName)\r\n            }\r\n        } else if (objNode.nodeName.toLowerCase() === 'svg') {\r\n            node = options.document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n            insideSvg = true\r\n        } else {\r\n            node = options.document.createElement(objNode.nodeName)\r\n        }\r\n\r\n        if (objNode.attributes) {\r\n            Object.entries(objNode.attributes).forEach(([key, value]) => node.setAttribute(key, value))\r\n        }\r\n        if (objNode.childNodes) {\r\n            objNode.childNodes.forEach(childNode => node.appendChild(objToNode(childNode, insideSvg, options)))\r\n        }\r\n        if (options.valueDiffing) {\r\n            if (objNode.value) {\r\n                node.value = objNode.value\r\n            }\r\n            if (objNode.checked) {\r\n                node.checked = objNode.checked\r\n            }\r\n            if (objNode.selected) {\r\n                node.selected = objNode.selected\r\n            }\r\n        }\r\n    }\r\n    return node\r\n}\r\n","import {objToNode} from \"./fromVirtual\"\r\n\r\n// ===== Apply a diff =====\r\n\r\nfunction getFromRoute(node, route) {\r\n    route = route.slice()\r\n    while (route.length > 0) {\r\n        if (!node.childNodes) {\r\n            return false\r\n        }\r\n        const c = route.splice(0, 1)[0]\r\n        node = node.childNodes[c]\r\n    }\r\n    return node\r\n}\r\n\r\nexport function applyDiff(\r\n        tree,\r\n        diff,\r\n        options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\r\n    ) {\r\n    let node = getFromRoute(tree, diff[options._const.route])\r\n    let newNode\r\n    let reference\r\n    let route\r\n    let nodeArray\r\n    let c\r\n\r\n    // pre-diff hook\r\n    const info = {\r\n        diff,\r\n        node\r\n    }\r\n\r\n    if (options.preDiffApply(info)) {\r\n        return true\r\n    }\r\n\r\n    switch (diff[options._const.action]) {\r\n        case options._const.addAttribute:\r\n            if (!node || !node.setAttribute) {\r\n                return false\r\n            }\r\n            node.setAttribute(diff[options._const.name], diff[options._const.value])\r\n            break\r\n        case options._const.modifyAttribute:\r\n            if (!node || !node.setAttribute) {\r\n                return false\r\n            }\r\n            node.setAttribute(diff[options._const.name], diff[options._const.newValue])\r\n            if (node.nodeName.toUpperCase() === 'INPUT' && diff[options._const.name] === 'value') {\r\n                node.value = diff[options._const.newValue]\r\n            }\r\n            break\r\n        case options._const.removeAttribute:\r\n            if (!node || !node.removeAttribute) {\r\n                return false\r\n            }\r\n            node.removeAttribute(diff[options._const.name])\r\n            break\r\n        case options._const.modifyTextElement:\r\n            if (!node || node.nodeType !== 3) {\r\n                return false\r\n            }\r\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\r\n            break\r\n        case options._const.modifyValue:\r\n            if (!node || typeof node.value === 'undefined') {\r\n                return false\r\n            }\r\n            node.value = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyComment:\r\n            if (!node || typeof node.data === 'undefined') {\r\n                return false\r\n            }\r\n            options.textDiff(node, node.data, diff[options._const.oldValue], diff[options._const.newValue])\r\n            break\r\n        case options._const.modifyChecked:\r\n            if (!node || typeof node.checked === 'undefined') {\r\n                return false\r\n            }\r\n            node.checked = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifySelected:\r\n            if (!node || typeof node.selected === 'undefined') {\r\n                return false\r\n            }\r\n            node.selected = diff[options._const.newValue]\r\n            break\r\n        case options._const.replaceElement:\r\n            node.parentNode.replaceChild(\r\n                objToNode(\r\n                    diff[options._const.newValue],\r\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\r\n                    options\r\n                ),\r\n                node\r\n            )\r\n            break\r\n        case options._const.relocateGroup:\r\n            nodeArray = Array(...new Array(diff.groupLength)).map(() => node.removeChild(node.childNodes[diff[options._const.from]]))\r\n            nodeArray.forEach((childNode, index) => {\r\n                if (index === 0) {\r\n                    reference = node.childNodes[diff[options._const.to]]\r\n                }\r\n                node.insertBefore(childNode, reference || null)\r\n            })\r\n            break\r\n        case options._const.removeElement:\r\n            node.parentNode.removeChild(node)\r\n            break\r\n        case options._const.addElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            node = getFromRoute(tree, route)\r\n            node.insertBefore(\r\n                objToNode(\r\n                    diff[options._const.element],\r\n                    node.namespaceURI === 'http://www.w3.org/2000/svg',\r\n                    options\r\n                ),\r\n                node.childNodes[c] || null\r\n            )\r\n            break\r\n        case options._const.removeTextElement:\r\n            if (!node || node.nodeType !== 3) {\r\n                return false\r\n            }\r\n            node.parentNode.removeChild(node)\r\n            break\r\n        case options._const.addTextElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            newNode = options.document.createTextNode(diff[options._const.value])\r\n            node = getFromRoute(tree, route)\r\n            if (!node || !node.childNodes) {\r\n                return false\r\n            }\r\n            node.insertBefore(newNode, node.childNodes[c] || null)\r\n            break\r\n        default:\r\n            console.log('unknown action')\r\n    }\r\n\r\n    // if a new node was created, we might be interested in its\r\n    // post diff hook\r\n    info.newNode = newNode\r\n    options.postDiffApply(info)\r\n\r\n    return true\r\n}\r\n\r\nexport function applyDOM(tree, diffs, options) {\r\n    return diffs.every(diff => applyDiff(tree, diff, options))\r\n}\r\n","import {applyDiff} from \"./apply\"\r\n\r\n// ===== Undo a diff =====\r\n\r\nfunction swap(obj, p1, p2) {\r\n    const tmp = obj[p1]\r\n    obj[p1] = obj[p2]\r\n    obj[p2] = tmp\r\n}\r\n\r\nfunction undoDiff(\r\n    tree,\r\n    diff,\r\n    options // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\r\n) {\r\n\r\n    switch (diff[options._const.action]) {\r\n        case options._const.addAttribute:\r\n            diff[options._const.action] = options._const.removeAttribute\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyAttribute:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.removeAttribute:\r\n            diff[options._const.action] = options._const.addAttribute\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyTextElement:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyValue:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyComment:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifyChecked:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.modifySelected:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.replaceElement:\r\n            swap(diff, options._const.oldValue, options._const.newValue)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.relocateGroup:\r\n            swap(diff, options._const.from, options._const.to)\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.removeElement:\r\n            diff[options._const.action] = options._const.addElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.addElement:\r\n            diff[options._const.action] = options._const.removeElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.removeTextElement:\r\n            diff[options._const.action] = options._const.addTextElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        case options._const.addTextElement:\r\n            diff[options._const.action] = options._const.removeTextElement\r\n            applyDiff(tree, diff, options)\r\n            break\r\n        default:\r\n            console.log('unknown action')\r\n    }\r\n\r\n}\r\n\r\nexport function undoDOM(tree, diffs, options) {\r\n    if (!diffs.length) {\r\n        diffs = [diffs]\r\n    }\r\n    diffs = diffs.slice()\r\n    diffs.reverse()\r\n    diffs.forEach(diff => {\r\n        undoDiff(tree, diff, options)\r\n    })\r\n}\r\n","export class Diff {\r\n    constructor(options = {}) {\r\n        Object.entries(options).forEach(([key, value]) => this[key] = value)\r\n    }\r\n\r\n    toString() {\r\n        return JSON.stringify(this)\r\n    }\r\n\r\n    setValue(aKey, aValue) {\r\n        this[aKey] = aValue\r\n        return this\r\n    }\r\n}\r\n\r\nfunction elementDescriptors(el) {\r\n    const output = []\r\n    output.push(el.nodeName)\r\n    if (el.nodeName !== '#text' && el.nodeName !== '#comment') {\r\n        if (el.attributes) {\r\n            if (el.attributes['class']) {\r\n                output.push(`${el.nodeName}.${el.attributes['class'].replace(/ /g, '.')}`)\r\n            }\r\n            if (el.attributes.id) {\r\n                output.push(`${el.nodeName}#${el.attributes.id}`)\r\n            }\r\n        }\r\n\r\n    }\r\n    return output\r\n}\r\n\r\nfunction findUniqueDescriptors(li) {\r\n    const uniqueDescriptors = {}\r\n    const duplicateDescriptors = {}\r\n\r\n    li.forEach(node => {\r\n        elementDescriptors(node).forEach(descriptor => {\r\n            const inUnique = descriptor in uniqueDescriptors\r\n            const inDupes = descriptor in duplicateDescriptors\r\n            if (!inUnique && !inDupes) {\r\n                uniqueDescriptors[descriptor] = true\r\n            } else if (inUnique) {\r\n                delete uniqueDescriptors[descriptor]\r\n                duplicateDescriptors[descriptor] = true\r\n            }\r\n        })\r\n    })\r\n\r\n    return uniqueDescriptors\r\n}\r\n\r\nfunction uniqueInBoth(l1, l2) {\r\n    const l1Unique = findUniqueDescriptors(l1)\r\n    const l2Unique = findUniqueDescriptors(l2)\r\n    const inBoth = {}\r\n\r\n    Object.keys(l1Unique).forEach(key => {\r\n        if (l2Unique[key]) {\r\n            inBoth[key] = true\r\n        }\r\n    })\r\n\r\n    return inBoth\r\n}\r\n\r\nexport function removeDone(tree) {\r\n    delete tree.outerDone\r\n    delete tree.innerDone\r\n    delete tree.valueDone\r\n    if (tree.childNodes) {\r\n        return tree.childNodes.every(removeDone)\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nexport function isEqual(e1, e2) {\r\n    if (!['nodeName', 'value', 'checked', 'selected', 'data'].every(element => {\r\n            if (e1[element] !== e2[element]) {\r\n                return false\r\n            }\r\n            return true\r\n        })) {\r\n        return false\r\n    }\r\n\r\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\r\n        return false\r\n    }\r\n\r\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\r\n        return false\r\n    }\r\n    if (e1.attributes) {\r\n        const e1Attributes = Object.keys(e1.attributes)\r\n        const e2Attributes = Object.keys(e2.attributes)\r\n\r\n        if (e1Attributes.length !== e2Attributes.length) {\r\n            return false\r\n        }\r\n        if (!e1Attributes.every(attribute => {\r\n                if (e1.attributes[attribute] !== e2.attributes[attribute]) {\r\n                    return false\r\n                }\r\n                return true\r\n            })) {\r\n            return false\r\n        }\r\n    }\r\n    if (e1.childNodes) {\r\n        if (e1.childNodes.length !== e2.childNodes.length) {\r\n            return false\r\n        }\r\n        if (!e1.childNodes.every((childNode, index) => isEqual(childNode, e2.childNodes[index]))) {\r\n\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n\r\nexport function roughlyEqual(e1, e2, uniqueDescriptors, sameSiblings, preventRecursion) {\r\n\r\n    if (!e1 || !e2) {\r\n        return false\r\n    }\r\n\r\n    if (e1.nodeName !== e2.nodeName) {\r\n        return false\r\n    }\r\n\r\n    if (e1.nodeName === '#text') {\r\n        // Note that we initially don't care what the text content of a node is,\r\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\r\n        // equal, and then we can find out the true text difference later.\r\n        return preventRecursion ? true : e1.data === e2.data\r\n    }\r\n\r\n\r\n    if (e1.nodeName in uniqueDescriptors) {\r\n        return true\r\n    }\r\n\r\n    if (e1.attributes && e2.attributes) {\r\n\r\n        if (e1.attributes.id) {\r\n            if (e1.attributes.id !== e2.attributes.id) {\r\n                return false\r\n            } else {\r\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\r\n                if (idDescriptor in uniqueDescriptors) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        if (e1.attributes['class'] && e1.attributes['class'] === e2.attributes['class']) {\r\n            const classDescriptor = `${e1.nodeName}.${e1.attributes['class'].replace(/ /g, '.')}`\r\n            if (classDescriptor in uniqueDescriptors) {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    if (sameSiblings) {\r\n        return true\r\n    }\r\n\r\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\r\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\r\n\r\n    if (nodeList1.length !== nodeList2.length) {\r\n        return false\r\n    }\r\n\r\n    if (preventRecursion) {\r\n        return nodeList1.every((element, index) => element.nodeName === nodeList2[index].nodeName)\r\n    } else {\r\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\r\n        // was not set, we must explicitly force it to true for child iterations.\r\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\r\n        return nodeList1.every((element, index) => roughlyEqual(element, nodeList2[index], childUniqueDescriptors, true, true))\r\n    }\r\n}\r\n\r\n\r\nexport function cloneObj(obj) { //  TODO: Do we really need to clone here? Is it not enough to just return the original object?\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\n/**\r\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\r\n */\r\nfunction findCommonSubsets(c1, c2, marked1, marked2) {\r\n    let lcsSize = 0\r\n    let index = []\r\n    const c1Length = c1.length\r\n    const c2Length = c2.length\r\n\r\n    const // set up the matching table\r\n        matches = Array(...new Array(c1Length + 1)).map(() => [])\r\n\r\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\r\n\r\n    let // If all of the elements are the same tag, id and class, then we can\r\n        // consider them roughly the same even if they have a different number of\r\n        // children. This will reduce removing and re-adding similar elements.\r\n        subsetsSame = c1Length === c2Length\r\n\r\n    if (subsetsSame) {\r\n\r\n        c1.some((element, i) => {\r\n            const c1Desc = elementDescriptors(element)\r\n            const c2Desc = elementDescriptors(c2[i])\r\n            if (c1Desc.length !== c2Desc.length) {\r\n                subsetsSame = false\r\n                return true\r\n            }\r\n            c1Desc.some((description, i) => {\r\n                if (description !== c2Desc[i]) {\r\n                    subsetsSame = false\r\n                    return true\r\n                }\r\n            })\r\n            if (!subsetsSame) {\r\n                return true\r\n            }\r\n        })\r\n    }\r\n\r\n    // fill the matches with distance values\r\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\r\n        const c1Element = c1[c1Index]\r\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\r\n            const c2Element = c2[c2Index]\r\n            if (!marked1[c1Index] && !marked2[c2Index] && roughlyEqual(c1Element, c2Element, uniqueDescriptors, subsetsSame)) {\r\n                matches[c1Index + 1][c2Index + 1] = (matches[c1Index][c2Index] ? matches[c1Index][c2Index] + 1 : 1)\r\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\r\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\r\n                    index = [c1Index + 1, c2Index + 1]\r\n                }\r\n            } else {\r\n                matches[c1Index + 1][c2Index + 1] = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    if (lcsSize === 0) {\r\n        return false\r\n    }\r\n\r\n    return {\r\n        oldValue: index[0] - lcsSize,\r\n        newValue: index[1] - lcsSize,\r\n        length: lcsSize\r\n    }\r\n}\r\n\r\n/**\r\n * This should really be a predefined function in Array...\r\n */\r\nfunction makeArray(n, v) {\r\n    return Array(...new Array(n)).map(() => v)\r\n}\r\n\r\n/**\r\n * Generate arrays that indicate which node belongs to which subset,\r\n * or whether it's actually an orphan node, existing in only one\r\n * of the two trees, rather than somewhere in both.\r\n *\r\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\r\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\r\n * The second longest is \"<img>\" (length 1), so it will be group 1.\r\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\r\n *\r\n * If an element is not part of any group, it will stay being 'true', which\r\n * is the initial value. For example:\r\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\r\n *\r\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\r\n * therefore be marked by \"true\". The remaining parts are parts of the\r\n * groups 0 and 1:\r\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\r\n *\r\n */\r\nexport function getGapInformation(t1, t2, stable) {\r\n    const gaps1 = t1.childNodes ? makeArray(t1.childNodes.length, true) : []\r\n    const gaps2 = t2.childNodes ? makeArray(t2.childNodes.length, true) : []\r\n    let group = 0\r\n\r\n    // give elements from the same subset the same group number\r\n    stable.forEach(subset => {\r\n        const endOld = subset.oldValue + subset.length\r\n        const endNew = subset.newValue + subset.length\r\n\r\n        for (let j = subset.oldValue; j < endOld; j += 1) {\r\n            gaps1[j] = group\r\n        }\r\n        for (let j = subset.newValue; j < endNew; j += 1) {\r\n            gaps2[j] = group\r\n        }\r\n        group += 1\r\n    })\r\n\r\n    return {\r\n        gaps1,\r\n        gaps2\r\n    }\r\n}\r\n\r\n/**\r\n * Find all matching subsets, based on immediate child differences only.\r\n */\r\nexport function markSubTrees(oldTree, newTree) {\r\n    // note: the child lists are views, and so update as we update old/newTree\r\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\r\n\r\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\r\n    const marked1 = makeArray(oldChildren.length, false)\r\n    const marked2 = makeArray(newChildren.length, false)\r\n    const subsets = []\r\n    let subset = true\r\n\r\n    const returnIndex = function() {\r\n        return arguments[1]\r\n    }\r\n\r\n    const markBoth = i => {\r\n        marked1[subset.oldValue + i] = true\r\n        marked2[subset.newValue + i] = true\r\n    }\r\n\r\n    while (subset) {\r\n        subset = findCommonSubsets(oldChildren, newChildren, marked1, marked2)\r\n        if (subset) {\r\n            subsets.push(subset)\r\n            const subsetArray = Array(...new Array(subset.length)).map(returnIndex)\r\n            subsetArray.forEach(item => markBoth(item))\r\n        }\r\n    }\r\n\r\n    oldTree.subsets = subsets\r\n    oldTree.subsetsAge = 100\r\n    return subsets\r\n}\r\n\r\nexport class DiffTracker {\r\n    constructor() {\r\n        this.list = []\r\n    }\r\n\r\n    add(diffs) {\r\n        this.list.push(...diffs)\r\n    }\r\n    forEach(fn) {\r\n        this.list.forEach(li => fn(li))\r\n    }\r\n\r\n}\r\n","import {cloneObj} from \"./helpers\"\r\n\r\n// ===== Apply a virtual diff =====\r\n\r\nfunction getFromVirtualRoute(tree, route) {\r\n    let node = tree\r\n    let parentNode\r\n    let nodeIndex\r\n\r\n    route = route.slice()\r\n    while (route.length > 0) {\r\n        if (!node.childNodes) {\r\n            return false\r\n        }\r\n        nodeIndex = route.splice(0, 1)[0]\r\n        parentNode = node\r\n        node = node.childNodes[nodeIndex]\r\n    }\r\n    return {\r\n        node,\r\n        parentNode,\r\n        nodeIndex\r\n    }\r\n}\r\n\r\nfunction applyVirtualDiff(\r\n        tree,\r\n        diff,\r\n        options // {preVirtualDiffApply, postVirtualDiffApply, _const}\r\n    ) {\r\n    const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\r\n    let node = routeInfo.node\r\n    const parentNode = routeInfo.parentNode\r\n    const nodeIndex = routeInfo.nodeIndex\r\n    const newSubsets = []\r\n\r\n    // pre-diff hook\r\n    const info = {\r\n        diff,\r\n        node\r\n    }\r\n\r\n    if (options.preVirtualDiffApply(info)) {\r\n        return true\r\n    }\r\n\r\n    let newNode\r\n    let nodeArray\r\n    let route\r\n    let c\r\n    switch (diff[options._const.action]) {\r\n        case options._const.addAttribute:\r\n            if (!node.attributes) {\r\n                node.attributes = {}\r\n            }\r\n\r\n            node.attributes[diff[options._const.name]] = diff[options._const.value]\r\n\r\n            if (diff[options._const.name] === 'checked') {\r\n                node.checked = true\r\n            } else if (diff[options._const.name] === 'selected') {\r\n                node.selected = true\r\n            } else if (node.nodeName.toUpperCase() === 'INPUT' && diff[options._const.name] === 'value') {\r\n                node.value = diff[options._const.value]\r\n            }\r\n\r\n            break\r\n        case options._const.modifyAttribute:\r\n            node.attributes[diff[options._const.name]] = diff[options._const.newValue]\r\n            break\r\n        case options._const.removeAttribute:\r\n\r\n            delete node.attributes[diff[options._const.name]]\r\n\r\n            if (Object.keys(node.attributes).length === 0) {\r\n                delete node.attributes\r\n            }\r\n\r\n            if (diff[options._const.name] === 'checked') {\r\n                node.checked = false\r\n            } else if (diff[options._const.name] === 'selected') {\r\n                delete node.selected\r\n            } else if (node.nodeName.toUpperCase() === 'INPUT' && diff[options._const.name] === 'value') {\r\n                delete node.value\r\n            }\r\n\r\n            break\r\n        case options._const.modifyTextElement:\r\n            node.data = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyValue:\r\n            node.value = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyComment:\r\n            node.data = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifyChecked:\r\n            node.checked = diff[options._const.newValue]\r\n            break\r\n        case options._const.modifySelected:\r\n            node.selected = diff[options._const.newValue]\r\n            break\r\n        case options._const.replaceElement:\r\n            newNode = cloneObj(diff[options._const.newValue])\r\n            newNode.outerDone = true\r\n            newNode.innerDone = true\r\n            newNode.valueDone = true\r\n            parentNode.childNodes[nodeIndex] = newNode\r\n            break\r\n        case options._const.relocateGroup:\r\n            nodeArray = node.childNodes.splice(diff[options._const.from], diff.groupLength).reverse()\r\n            nodeArray.forEach(movedNode => node.childNodes.splice(diff[options._const.to], 0, movedNode))\r\n            if (node.subsets) {\r\n                node.subsets.forEach(map => {\r\n                    if (diff[options._const.from] < diff[options._const.to] && map.oldValue <= diff[options._const.to] && map.oldValue > diff[options._const.from]) {\r\n                        map.oldValue -= diff.groupLength\r\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\r\n                        if (splitLength > 0) {\r\n                            // new insertion splits map.\r\n                            newSubsets.push({\r\n                                oldValue: diff[options._const.to] + diff.groupLength,\r\n                                newValue: map.newValue + map.length - splitLength,\r\n                                length: splitLength\r\n                            })\r\n                            map.length -= splitLength\r\n                        }\r\n                    } else if (diff[options._const.from] > diff[options._const.to] && map.oldValue > diff[options._const.to] && map.oldValue < diff[options._const.from]) {\r\n                        map.oldValue += diff.groupLength\r\n                        const splitLength = map.oldValue + map.length - diff[options._const.to]\r\n                        if (splitLength > 0) {\r\n                            // new insertion splits map.\r\n                            newSubsets.push({\r\n                                oldValue: diff[options._const.to] + diff.groupLength,\r\n                                newValue: map.newValue + map.length - splitLength,\r\n                                length: splitLength\r\n                            })\r\n                            map.length -= splitLength\r\n                        }\r\n                    } else if (map.oldValue === diff[options._const.from]) {\r\n                        map.oldValue = diff[options._const.to]\r\n                    }\r\n                })\r\n            }\r\n\r\n            break\r\n        case options._const.removeElement:\r\n            parentNode.childNodes.splice(nodeIndex, 1)\r\n            if (parentNode.subsets) {\r\n                parentNode.subsets.forEach(map => {\r\n                    if (map.oldValue > nodeIndex) {\r\n                        map.oldValue -= 1\r\n                    } else if (map.oldValue === nodeIndex) {\r\n                        map.delete = true\r\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\r\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\r\n                            map.length--\r\n                        } else {\r\n                            newSubsets.push({\r\n                                newValue: map.newValue + nodeIndex - map.oldValue,\r\n                                oldValue: nodeIndex,\r\n                                length: map.length - nodeIndex + map.oldValue - 1\r\n                            })\r\n                            map.length = nodeIndex - map.oldValue\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            node = parentNode\r\n            break\r\n        case options._const.addElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            node = getFromVirtualRoute(tree, route).node\r\n            newNode = cloneObj(diff[options._const.element])\r\n            newNode.outerDone = true\r\n            newNode.innerDone = true\r\n            newNode.valueDone = true\r\n\r\n            if (!node.childNodes) {\r\n                node.childNodes = []\r\n            }\r\n\r\n            if (c >= node.childNodes.length) {\r\n                node.childNodes.push(newNode)\r\n            } else {\r\n                node.childNodes.splice(c, 0, newNode)\r\n            }\r\n            if (node.subsets) {\r\n                node.subsets.forEach(map => {\r\n                    if (map.oldValue >= c) {\r\n                        map.oldValue += 1\r\n                    } else if (map.oldValue < c && (map.oldValue + map.length) > c) {\r\n                        const splitLength = map.oldValue + map.length - c\r\n                        newSubsets.push({\r\n                            newValue: map.newValue + map.length - splitLength,\r\n                            oldValue: c + 1,\r\n                            length: splitLength\r\n                        })\r\n                        map.length -= splitLength\r\n                    }\r\n                })\r\n            }\r\n            break\r\n        case options._const.removeTextElement:\r\n            parentNode.childNodes.splice(nodeIndex, 1)\r\n            if (parentNode.nodeName.toUpperCase() === 'TEXTAREA') {\r\n                delete parentNode.value\r\n            }\r\n            if (parentNode.subsets) {\r\n                parentNode.subsets.forEach(map => {\r\n                    if (map.oldValue > nodeIndex) {\r\n                        map.oldValue -= 1\r\n                    } else if (map.oldValue === nodeIndex) {\r\n                        map.delete = true\r\n                    } else if (map.oldValue < nodeIndex && (map.oldValue + map.length) > nodeIndex) {\r\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\r\n                            map.length--\r\n                        } else {\r\n                            newSubsets.push({\r\n                                newValue: map.newValue + nodeIndex - map.oldValue,\r\n                                oldValue: nodeIndex,\r\n                                length: map.length - nodeIndex + map.oldValue - 1\r\n                            })\r\n                            map.length = nodeIndex - map.oldValue\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            node = parentNode\r\n            break\r\n        case options._const.addTextElement:\r\n            route = diff[options._const.route].slice()\r\n            c = route.splice(route.length - 1, 1)[0]\r\n            newNode = {}\r\n            newNode.nodeName = '#text'\r\n            newNode.data = diff[options._const.value]\r\n            node = getFromVirtualRoute(tree, route).node\r\n            if (!node.childNodes) {\r\n                node.childNodes = []\r\n            }\r\n\r\n            if (c >= node.childNodes.length) {\r\n                node.childNodes.push(newNode)\r\n            } else {\r\n                node.childNodes.splice(c, 0, newNode)\r\n            }\r\n            if (node.nodeName.toUpperCase() === 'TEXTAREA') {\r\n                node.value = diff[options._const.newValue]\r\n            }\r\n            if (node.subsets) {\r\n                node.subsets.forEach(map => {\r\n                    if (map.oldValue >= c) {\r\n                        map.oldValue += 1\r\n                    }\r\n                    if (map.oldValue < c && (map.oldValue + map.length) > c) {\r\n                        const splitLength = map.oldValue + map.length - c\r\n                        newSubsets.push({\r\n                            newValue: map.newValue + map.length - splitLength,\r\n                            oldValue: c + 1,\r\n                            length: splitLength\r\n                        })\r\n                        map.length -= splitLength\r\n                    }\r\n                })\r\n            }\r\n            break\r\n        default:\r\n            console.log('unknown action')\r\n    }\r\n\r\n    if (node.subsets) {\r\n        node.subsets = node.subsets.filter(map => !map.delete && map.oldValue !== map.newValue)\r\n        if (newSubsets.length) {\r\n            node.subsets = node.subsets.concat(newSubsets)\r\n        }\r\n    }\r\n\r\n    // capture newNode for the callback\r\n    info.newNode = newNode\r\n    options.postVirtualDiffApply(info)\r\n\r\n    return\r\n}\r\n\r\nexport function applyVirtual(tree, diffs, options) {\r\n    diffs.forEach(diff => {\r\n        applyVirtualDiff(tree, diff, options)\r\n    })\r\n    return true\r\n}\r\n","export function nodeToObj(aNode, options = {}) {\r\n    const objNode = {}\r\n    objNode.nodeName = aNode.localName || aNode.nodeName\r\n    /*if (aNode.localName != aNode.nodeName.toLowerCase())\r\n    {\r\n        console.log(`Diff: local:[${aNode.nodeName}] vs node:[${aNode.nodeName}]`)\r\n    }*/\r\n    if (objNode.nodeName === '#text' || objNode.nodeName === '#comment') {\r\n        objNode.data = aNode.data\r\n    } else {\r\n        if (aNode.attributes && aNode.attributes.length > 0) {\r\n            objNode.attributes = {}\r\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\r\n            nodeArray.forEach(attribute => objNode.attributes[attribute.name] = attribute.value)\r\n        }\r\n        if (objNode.nodeName.toUpperCase() === 'TEXTAREA') {\r\n            objNode.value = aNode.value\r\n        } else if (aNode.childNodes && aNode.childNodes.length > 0) {\r\n            objNode.childNodes = []\r\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\r\n            nodeArray.forEach(childNode => objNode.childNodes.push(nodeToObj(childNode, options)))\r\n        }\r\n        if (options.valueDiffing) {\r\n            if (aNode.checked !== undefined && aNode.type && ['radio', 'checkbox'].includes(aNode.type.toLowerCase())) {\r\n                objNode.checked = aNode.checked\r\n            } else if (aNode.value !== undefined) {\r\n                objNode.value = aNode.value\r\n            }\r\n            if (aNode.selected !== undefined) {\r\n                objNode.selected = aNode.selected\r\n            }\r\n        }\r\n    }\r\n    return objNode\r\n}\r\n","// from html-parse-stringify (MIT)\r\n\r\nconst tagRE = /<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>/g\r\n// re-used obj for quick lookups of components\r\nconst empty = Object.create ? Object.create(null) : {}\r\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\r\n\r\n\r\nfunction unescape(string) {\r\n    return string.replace(/&lt;/g, '<').replace(/&gt;/g, '>')\r\n.replace(/&amp;/g, '&')\r\n}\r\n\r\n// create optimized lookup object for\r\n// void elements as listed here:\r\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\r\nconst lookup = {\r\n    area: true,\r\n    base: true,\r\n    br: true,\r\n    col: true,\r\n    embed: true,\r\n    hr: true,\r\n    img: true,\r\n    input: true,\r\n    keygen: true,\r\n    link: true,\r\n    menuItem: true,\r\n    meta: true,\r\n    param: true,\r\n    source: true,\r\n    track: true,\r\n    wbr: true\r\n}\r\n\r\n\r\nfunction parseTag(tag) {\r\n    const res = {\r\n        nodeName: '',\r\n        attributes: {}\r\n    }\r\n\r\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\r\n    if (tagMatch) {\r\n        res.nodeName = tagMatch[1]\r\n        if (lookup[tagMatch[1].toLowerCase()] || tag.charAt(tag.length - 2) === '/') {\r\n            res.voidElement = true\r\n        }\r\n\r\n        // handle comment tag\r\n        if (res.nodeName.startsWith('!--')) {\r\n            const endIndex = tag.indexOf('-->')\r\n            return {\r\n                type: 'comment',\r\n                data: endIndex !== -1 ? tag.slice(4, endIndex) : ''\r\n            }\r\n        }\r\n    }\r\n\r\n    let reg = new RegExp(attrRE)\r\n    let result = null\r\n    let done = false\r\n    while (!done) {\r\n        result = reg.exec(tag)\r\n\r\n        if (result === null) {\r\n            done = true\r\n        } else if (result[0].trim()) {\r\n            if (result[1]) {\r\n                let attr = result[1].trim()\r\n                let arr = [attr, \"\"]\r\n\r\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\r\n\r\n                res.attributes[arr[0]] = arr[1]\r\n                reg.lastIndex--\r\n            } else if (result[2]) res.attributes[result[2]] = result[3].trim().substring(1, result[3].length - 1)\r\n        }\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nfunction parse(\r\n    html,\r\n    options = {components: empty}\r\n) {\r\n    const result = []\r\n    let current\r\n    let level = -1\r\n    const arr = []\r\n    let inComponent = false\r\n\r\n    html.replace(tagRE, (tag, index) => {\r\n        if (inComponent) {\r\n            if (tag !== (`</${current.nodeName}>`)) {\r\n                return\r\n            } else {\r\n                inComponent = false\r\n            }\r\n        }\r\n        const isOpen = tag.charAt(1) !== '/'\r\n        const isComment = tag.startsWith('<!--')\r\n        const start = index + tag.length\r\n        const nextChar = html.charAt(start)\r\n        let parent\r\n\r\n        if (isComment) {\r\n            const comment = parseTag(tag)\r\n\r\n            // if we're at root, push new base node\r\n            if (level < 0) {\r\n                result.push(comment)\r\n                return result\r\n            }\r\n            parent = arr[level]\r\n            if (parent) {\r\n                if (!parent.childNodes) {\r\n                    parent.childNodes = []\r\n                }\r\n                parent.childNodes.push(comment)\r\n            }\r\n\r\n            return result\r\n        }\r\n\r\n        if (isOpen) {\r\n            current = parseTag(tag)\r\n            level++\r\n            if (current.type === 'tag' && options.components[current.nodeName]) {\r\n                current.type = 'component'\r\n                inComponent = true\r\n            }\r\n\r\n            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {\r\n                if (!current.childNodes) {\r\n                    current.childNodes = []\r\n                }\r\n                current.childNodes.push({\r\n                    nodeName: '#text',\r\n                    data: unescape(html.slice(start, html.indexOf('<', start)))\r\n                })\r\n            }\r\n\r\n            // if we're at root, push new base node\r\n            if (level === 0) {\r\n                result.push(current)\r\n            }\r\n\r\n            parent = arr[level - 1]\r\n\r\n            if (parent) {\r\n                if (!parent.childNodes) {\r\n                    parent.childNodes = []\r\n                }\r\n                parent.childNodes.push(current)\r\n            }\r\n\r\n            arr[level] = current\r\n        }\r\n\r\n        if (!isOpen || current.voidElement) {\r\n            level--\r\n            if (!inComponent && nextChar !== '<' && nextChar) {\r\n                // trailing text node\r\n                // if we're at the root, push a base text node. otherwise add as\r\n                // a child to the current node.\r\n                parent = level === -1 ? result : arr[level].childNodes || []\r\n\r\n                // calculate correct end of the data slice in case there's\r\n                // no tag after the text node.\r\n                const end = html.indexOf('<', start)\r\n                const data = unescape(html.slice(start, end === -1 ? undefined : end))\r\n                parent.push({\r\n                    nodeName: '#text',\r\n                    data\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return result[0]\r\n}\r\n\r\nfunction cleanObj(obj) {\r\n    delete obj.voidElement\r\n    if (obj.childNodes) {\r\n        obj.childNodes.forEach(child => cleanObj(child))\r\n    }\r\n    return obj\r\n}\r\n\r\nexport function stringToObj(string) {\r\n    return cleanObj(parse(string))\r\n}\r\n","import {Diff, DiffTracker, cloneObj, getGapInformation, isEqual, markSubTrees, removeDone, roughlyEqual} from \"./helpers\"\r\nimport {applyVirtual} from \"./apply\"\r\nimport {nodeToObj} from \"./fromDOM\"\r\nimport {stringToObj} from \"./fromString\"\r\n\r\n// ===== Create a diff =====\r\n\r\nexport class DiffFinder {\r\n    constructor(t1Node, t2Node, options) {\r\n        this.options = options\r\n        this.t1 = (t1Node instanceof HTMLElement) ? nodeToObj(t1Node, this.options) : (typeof t1Node === 'string') ? stringToObj(t1Node, this.options) : JSON.parse(JSON.stringify(t1Node))\r\n        this.t2 = (t2Node instanceof HTMLElement) ? nodeToObj(t2Node, this.options) : (typeof t2Node === 'string') ? stringToObj(t2Node, this.options) : JSON.parse(JSON.stringify(t2Node))\r\n        this.diffcount = 0\r\n        this.foundAll = false\r\n        if (this.debug) {\r\n            this.t1Orig = nodeToObj(t1Node, this.options)\r\n            this.t2Orig = nodeToObj(t2Node, this.options)\r\n        }\r\n\r\n        this.tracker = new DiffTracker()\r\n    }\r\n\r\n    init() {\r\n        return this.findDiffs(this.t1, this.t2)\r\n    }\r\n\r\n    findDiffs(t1, t2) {\r\n        let diffs\r\n        do {\r\n            if (this.options.debug) {\r\n                this.diffcount += 1\r\n                if (this.diffcount > this.options.diffcap) {\r\n                    window.diffError = [this.t1Orig, this.t2Orig]\r\n                    throw new Error(`surpassed diffcap:${JSON.stringify(this.t1Orig)} -> ${JSON.stringify(this.t2Orig)}`)\r\n                }\r\n            }\r\n            diffs = this.findNextDiff(t1, t2, [])\r\n\r\n            if (diffs.length === 0) {\r\n                // Last check if the elements really are the same now.\r\n                // If not, remove all info about being done and start over.\r\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\r\n                if (!isEqual(t1, t2)) {\r\n                    if (this.foundAll) {\r\n                        console.error('Could not find remaining diffs!')\r\n                    } else {\r\n                        this.foundAll = true\r\n                        removeDone(t1)\r\n                        diffs = this.findNextDiff(t1, t2, [])\r\n                    }\r\n                }\r\n            }\r\n            if (diffs.length > 0) {\r\n                this.foundAll = false\r\n                this.tracker.add(diffs)\r\n                applyVirtual(t1, diffs, this.options)\r\n            }\r\n        } while (diffs.length > 0)\r\n\r\n        return this.tracker.list\r\n    }\r\n\r\n    findNextDiff(t1, t2, route) {\r\n        let diffs\r\n        let fdiffs\r\n\r\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\r\n            return []\r\n        }\r\n        // outer differences?\r\n        if (!t1.outerDone) {\r\n            diffs = this.findOuterDiff(t1, t2, route)\r\n            if (this.options.filterOuterDiff) {\r\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\r\n                if (fdiffs) diffs = fdiffs\r\n            }\r\n            if (diffs.length > 0) {\r\n                t1.outerDone = true\r\n                return diffs\r\n            } else {\r\n                t1.outerDone = true\r\n            }\r\n        }\r\n        // inner differences?\r\n        if (!t1.innerDone) {\r\n            diffs = this.findInnerDiff(t1, t2, route)\r\n            if (diffs.length > 0) {\r\n                return diffs\r\n            } else {\r\n                t1.innerDone = true\r\n            }\r\n        }\r\n\r\n        if (this.options.valueDiffing && !t1.valueDone) {\r\n            // value differences?\r\n            diffs = this.findValueDiff(t1, t2, route)\r\n\r\n            if (diffs.length > 0) {\r\n                t1.valueDone = true\r\n                return diffs\r\n            } else {\r\n                t1.valueDone = true\r\n            }\r\n        }\r\n\r\n        // no differences\r\n        return []\r\n    }\r\n\r\n    findOuterDiff(t1, t2, route) {\r\n        const diffs = []\r\n        let attr\r\n        let attr1\r\n        let attr2\r\n        let attrLength\r\n        let pos\r\n        let i\r\n        if (t1.nodeName !== t2.nodeName) {\r\n            if (!route.length) {\r\n                throw new Error('Top level nodes have to be of the same kind.')\r\n            }\r\n            return [new Diff()\r\n                .setValue(this.options._const.action, this.options._const.replaceElement)\r\n                .setValue(this.options._const.oldValue, cloneObj(t1))\r\n                .setValue(this.options._const.newValue, cloneObj(t2))\r\n                .setValue(this.options._const.route, route)\r\n            ]\r\n        }\r\n        if (route.length && this.options.maxNodeDiffCount < Math.abs((t1.childNodes || []).length - (t2.childNodes || []).length)) {\r\n            return [new Diff()\r\n                .setValue(this.options._const.action, this.options._const.replaceElement)\r\n                .setValue(this.options._const.oldValue, cloneObj(t1))\r\n                .setValue(this.options._const.newValue, cloneObj(t2))\r\n                .setValue(this.options._const.route, route)\r\n            ]\r\n        }\r\n\r\n        if (t1.data !== t2.data) {\r\n            // Comment or text node.\r\n            if (t1.nodeName === '#text') {\r\n                return [new Diff()\r\n                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\r\n                    .setValue(this.options._const.route, route)\r\n                    .setValue(this.options._const.oldValue, t1.data)\r\n                    .setValue(this.options._const.newValue, t2.data)\r\n                ]\r\n            } else {\r\n                return [new Diff()\r\n                    .setValue(this.options._const.action, this.options._const.modifyComment)\r\n                    .setValue(this.options._const.route, route)\r\n                    .setValue(this.options._const.oldValue, t1.data)\r\n                    .setValue(this.options._const.newValue, t2.data)\r\n                ]\r\n            }\r\n\r\n        }\r\n\r\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\r\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\r\n\r\n        attrLength = attr1.length\r\n        for (i = 0; i < attrLength; i++) {\r\n            attr = attr1[i]\r\n            pos = attr2.indexOf(attr)\r\n            if (pos === -1) {\r\n                diffs.push(new Diff()\r\n                    .setValue(this.options._const.action, this.options._const.removeAttribute)\r\n                    .setValue(this.options._const.route, route)\r\n                    .setValue(this.options._const.name, attr)\r\n                    .setValue(this.options._const.value, t1.attributes[attr])\r\n                )\r\n            } else {\r\n                attr2.splice(pos, 1)\r\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.modifyAttribute)\r\n                        .setValue(this.options._const.route, route)\r\n                        .setValue(this.options._const.name, attr)\r\n                        .setValue(this.options._const.oldValue, t1.attributes[attr])\r\n                        .setValue(this.options._const.newValue, t2.attributes[attr])\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        attrLength = attr2.length\r\n        for (i = 0; i < attrLength; i++) {\r\n            attr = attr2[i]\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.addAttribute)\r\n                .setValue(this.options._const.route, route)\r\n                .setValue(this.options._const.name, attr)\r\n                .setValue(this.options._const.value, t2.attributes[attr])\r\n            )\r\n        }\r\n\r\n        return diffs\r\n    }\r\n\r\n    findInnerDiff(t1, t2, route) {\r\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\r\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\r\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\r\n        let childNodesLengthDifference = Math.abs(t1ChildNodes.length - t2ChildNodes.length)\r\n        let diffs = []\r\n        let index = 0\r\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\r\n            const subtrees = t1.subsets && t1.subsetsAge-- ? t1.subsets : (t1.childNodes && t2.childNodes) ? markSubTrees(t1, t2) : []\r\n\r\n            if (subtrees.length > 0) {\r\n                /* One or more groups have been identified among the childnodes of t1\r\n                 * and t2.\r\n                 */\r\n                diffs = this.attemptGroupRelocation(t1, t2, subtrees, route)\r\n                if (diffs.length > 0) {\r\n                    return diffs\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /* 0 or 1 groups of similar child nodes have been found\r\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\r\n         * contents are the same. When the number of groups is below 2,\r\n         * t1 and t2 are made to have the same length and each of the\r\n         * pairs of child nodes are diffed.\r\n         */\r\n\r\n        for (let i = 0; i < last; i += 1) {\r\n            const e1 = t1ChildNodes[i]\r\n            const e2 = t2ChildNodes[i]\r\n\r\n            if (childNodesLengthDifference) {\r\n                /* t1 and t2 have different amounts of childNodes. Add\r\n                 * and remove as necessary to obtain the same length */\r\n                if (e1 && !e2) {\r\n                    if (e1.nodeName === '#text') {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.value, e1.data)\r\n                        )\r\n                        index -= 1\r\n                    } else {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.removeElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.element, cloneObj(e1))\r\n                        )\r\n                        index -= 1\r\n                    }\r\n\r\n                } else if (e2 && !e1) {\r\n                    if (e2.nodeName === '#text') {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.addTextElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.value, e2.data)\r\n                        )\r\n                    } else {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.addElement)\r\n                            .setValue(this.options._const.route, route.concat(index))\r\n                            .setValue(this.options._const.element, cloneObj(e2))\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            /* We are now guaranteed that childNodes e1 and e2 exist,\r\n             * and that they can be diffed.\r\n             */\r\n            /* Diffs in child nodes should not affect the parent node,\r\n             * so we let these diffs be submitted together with other\r\n             * diffs.\r\n             */\r\n\r\n            if (e1 && e2) {\r\n                if (!this.options.maxChildCount || last < this.options.maxChildCount) {\r\n                    diffs = diffs.concat(this.findNextDiff(e1, e2, route.concat(index)))\r\n                } else if (!isEqual(e1, e2)) {\r\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\r\n                        if (e1.nodeName === '#text') {\r\n                            diffs.push(new Diff()\r\n                                .setValue(this.options._const.action, this.options._const.removeTextElement)\r\n                                .setValue(this.options._const.route, route.concat(index))\r\n                                .setValue(this.options._const.value, e1.data)\r\n                            )\r\n                        } else {\r\n                            diffs.push(\r\n                                new Diff()\r\n                                    .setValue(this.options._const.action, this.options._const.removeElement)\r\n                                    .setValue(this.options._const.element, cloneObj(e1))\r\n                                    .setValue(this.options._const.route, route.concat(index))\r\n                            )\r\n                        }\r\n                        t1ChildNodes.splice(i, 1)\r\n                        i -= 1\r\n                        index -= 1\r\n\r\n                        childNodesLengthDifference -= 1\r\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\r\n                        diffs = diffs.concat([\r\n                            new Diff()\r\n                                .setValue(this.options._const.action, this.options._const.addElement)\r\n                                .setValue(this.options._const.element, cloneObj(e2))\r\n                                .setValue(this.options._const.route, route.concat(index))\r\n                        ])\r\n                        t1ChildNodes.splice(i, 0, {})\r\n                        childNodesLengthDifference -= 1\r\n                    } else {\r\n                        diffs = diffs.concat([\r\n                            new Diff()\r\n                                .setValue(this.options._const.action, this.options._const.replaceElement)\r\n                                .setValue(this.options._const.oldValue, cloneObj(e1))\r\n                                .setValue(this.options._const.newValue, cloneObj(e2))\r\n                                .setValue(this.options._const.route, route.concat(index))\r\n                        ])\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            index += 1\r\n\r\n        }\r\n        t1.innerDone = true\r\n        return diffs\r\n    }\r\n\r\n    attemptGroupRelocation(t1, t2, subtrees, route) {\r\n        /* Either t1.childNodes and t2.childNodes have the same length, or\r\n         * there are at least two groups of similar elements can be found.\r\n         * attempts are made at equalizing t1 with t2. First all initial\r\n         * elements with no group affiliation (gaps=true) are removed (if\r\n         * only in t1) or added (if only in t2). Then the creation of a group\r\n         * relocation diff is attempted.\r\n         */\r\n        const gapInformation = getGapInformation(t1, t2, subtrees)\r\n        const gaps1 = gapInformation.gaps1\r\n        const gaps2 = gapInformation.gaps2\r\n        let shortest = Math.min(gaps1.length, gaps2.length)\r\n        let destinationDifferent\r\n        let toGroup\r\n        let group\r\n        let node\r\n        let similarNode\r\n        let testI\r\n        const diffs = []\r\n\r\n\r\n        for (let index2 = 0, index1 = 0; index2 < shortest; index1 += 1, index2 += 1) {\r\n            if (gaps1[index2] === true) {\r\n                node = t1.childNodes[index1]\r\n                if (node.nodeName === '#text') {\r\n                    if (t2.childNodes[index2].nodeName === '#text') {\r\n                        if (node.data !== t2.childNodes[index2].data) {\r\n                            testI = index1\r\n                            while (t1.childNodes.length > testI + 1 && t1.childNodes[testI + 1].nodeName === '#text') {\r\n                                testI += 1\r\n                                if (t2.childNodes[index2].data === t1.childNodes[testI].data) {\r\n                                    similarNode = true\r\n                                    break\r\n                                }\r\n                            }\r\n                            if (!similarNode) {\r\n                                diffs.push(new Diff()\r\n                                    .setValue(this.options._const.action, this.options._const.modifyTextElement)\r\n                                    .setValue(this.options._const.route, route.concat(index2))\r\n                                    .setValue(this.options._const.oldValue, node.data)\r\n                                    .setValue(this.options._const.newValue, t2.childNodes[index2].data)\r\n                                )\r\n                                return diffs\r\n                            }\r\n                        }\r\n                    } else {\r\n                        diffs.push(new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.removeTextElement)\r\n                            .setValue(this.options._const.route, route.concat(index2))\r\n                            .setValue(this.options._const.value, node.data)\r\n                        )\r\n                        gaps1.splice(index2, 1)\r\n                        shortest = Math.min(gaps1.length, gaps2.length)\r\n                        index2 -= 1\r\n                    }\r\n                } else {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.removeElement)\r\n                        .setValue(this.options._const.route, route.concat(index2))\r\n                        .setValue(this.options._const.element, cloneObj(node))\r\n                    )\r\n                    gaps1.splice(index2, 1)\r\n                    shortest = Math.min(gaps1.length, gaps2.length)\r\n                    index2 -= 1\r\n                }\r\n\r\n            } else if (gaps2[index2] === true) {\r\n                node = t2.childNodes[index2]\r\n                if (node.nodeName === '#text') {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.addTextElement)\r\n                        .setValue(this.options._const.route, route.concat(index2))\r\n                        .setValue(this.options._const.value, node.data)\r\n                    )\r\n                    gaps1.splice(index2, 0, true)\r\n                    shortest = Math.min(gaps1.length, gaps2.length)\r\n                    index1 -= 1\r\n                } else {\r\n                    diffs.push(new Diff()\r\n                        .setValue(this.options._const.action, this.options._const.addElement)\r\n                        .setValue(this.options._const.route, route.concat(index2))\r\n                        .setValue(this.options._const.element, cloneObj(node))\r\n                    )\r\n                    gaps1.splice(index2, 0, true)\r\n                    shortest = Math.min(gaps1.length, gaps2.length)\r\n                    index1 -= 1\r\n                }\r\n\r\n            } else if (gaps1[index2] !== gaps2[index2]) {\r\n                if (diffs.length > 0) {\r\n                    return diffs\r\n                }\r\n                // group relocation\r\n                group = subtrees[gaps1[index2]]\r\n                toGroup = Math.min(group.newValue, (t1.childNodes.length - group.length))\r\n                if (toGroup !== group.oldValue) {\r\n                    // Check whether destination nodes are different than originating ones.\r\n                    destinationDifferent = false\r\n                    for (let j = 0; j < group.length; j += 1) {\r\n                        if (!roughlyEqual(t1.childNodes[toGroup + j], t1.childNodes[group.oldValue + j], [], false, true)) {\r\n                            destinationDifferent = true\r\n                        }\r\n                    }\r\n                    if (destinationDifferent) {\r\n                        return [new Diff()\r\n                            .setValue(this.options._const.action, this.options._const.relocateGroup)\r\n                            .setValue('groupLength', group.length)\r\n                            .setValue(this.options._const.from, group.oldValue)\r\n                            .setValue(this.options._const.to, toGroup)\r\n                            .setValue(this.options._const.route, route)\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return diffs\r\n    }\r\n\r\n    findValueDiff(t1, t2, route) {\r\n        // Differences of value. Only useful if the value/selection/checked value\r\n        // differs from what is represented in the DOM. For example in the case\r\n        // of filled out forms, etc.\r\n        const diffs = []\r\n\r\n        if (t1.selected !== t2.selected) {\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.modifySelected)\r\n                .setValue(this.options._const.oldValue, t1.selected)\r\n                .setValue(this.options._const.newValue, t2.selected)\r\n                .setValue(this.options._const.route, route)\r\n            )\r\n        }\r\n\r\n        if ((t1.value || t2.value) && t1.value !== t2.value && t1.nodeName !== 'OPTION') {\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.modifyValue)\r\n                .setValue(this.options._const.oldValue, t1.value || \"\")\r\n                .setValue(this.options._const.newValue, t2.value || \"\")\r\n                .setValue(this.options._const.route, route)\r\n            )\r\n        }\r\n        if (t1.checked !== t2.checked) {\r\n            diffs.push(new Diff()\r\n                .setValue(this.options._const.action, this.options._const.modifyChecked)\r\n                .setValue(this.options._const.oldValue, t1.checked)\r\n                .setValue(this.options._const.newValue, t2.checked)\r\n                .setValue(this.options._const.route, route)\r\n            )\r\n        }\r\n\r\n        return diffs\r\n    }\r\n\r\n}\r\n","import {applyDOM, undoDOM} from \"./dom/index\"\r\nimport {DiffFinder} from \"./virtual/index\"\r\nexport {nodeToObj, stringToObj} from \"./virtual/index\"\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    debug: false,\r\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\r\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\r\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\r\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\r\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\r\n    textDiff(node, currentValue, expectedValue, newValue) {\r\n        node.data = newValue\r\n        return\r\n    },\r\n    // empty functions were benchmarked as running faster than both\r\n    // `f && f()` and `if (f) { f(); }`\r\n    preVirtualDiffApply() {},\r\n    postVirtualDiffApply() {},\r\n    preDiffApply() {},\r\n    postDiffApply() {},\r\n    filterOuterDiff: null,\r\n    compress: false, // Whether to work with compressed diffs\r\n    _const: false, // object with strings for every change types to be used in diffs.\r\n    document: window && window.document ? window.document : false\r\n}\r\n\r\n\r\nexport class DiffDOM {\r\n    constructor(options = {}) {\r\n\r\n        this.options = options\r\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\r\n        // by default, so this is the safest way of doing it currently.\r\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\r\n            if (!Object.prototype.hasOwnProperty.call(this.options, key)) {\r\n                this.options[key] = value\r\n            }\r\n        })\r\n\r\n        if (!this.options._const) {\r\n            const varNames = [\"addAttribute\", \"modifyAttribute\", \"removeAttribute\",\r\n                \"modifyTextElement\", \"relocateGroup\", \"removeElement\", \"addElement\",\r\n                \"removeTextElement\", \"addTextElement\", \"replaceElement\", \"modifyValue\",\r\n                \"modifyChecked\", \"modifySelected\", \"modifyComment\", \"action\", \"route\",\r\n                \"oldValue\", \"newValue\", \"element\", \"group\", \"from\", \"to\", \"name\",\r\n                \"value\", \"data\", \"attributes\", \"nodeName\", \"childNodes\", \"checked\",\r\n                \"selected\"\r\n            ]\r\n            this.options._const = {}\r\n            if (this.options.compress) {\r\n                varNames.forEach((varName, index) => this.options._const[varName] = index)\r\n            } else {\r\n                varNames.forEach(varName => this.options._const[varName] = varName)\r\n            }\r\n        }\r\n\r\n        this.DiffFinder = DiffFinder\r\n\r\n    }\r\n\r\n    apply(tree, diffs) {\r\n        return applyDOM(tree, diffs, this.options)\r\n    }\r\n\r\n    undo(tree, diffs) {\r\n        return undoDOM(tree, diffs, this.options)\r\n    }\r\n\r\n    diff(t1Node, t2Node) {\r\n        const finder = new this.DiffFinder(t1Node, t2Node, this.options)\r\n        return finder.init()\r\n    }\r\n\r\n}\r\n","/**\r\n * Use TraceLogger to figure out function calls inside\r\n * JS objects by wrapping an object with a TraceLogger\r\n * instance.\r\n *\r\n * Pretty-prints the call trace (using unicode box code)\r\n * when tracelogger.toString() is called.\r\n */\r\n\r\n/**\r\n * Wrap an object by calling new TraceLogger(obj)\r\n *\r\n * If you're familiar with Python decorators, this\r\n * does roughly the same thing, adding pre/post\r\n * call hook logging calls so that you can see\r\n * what's going on.\r\n */\r\nexport class TraceLogger {\r\n    constructor(obj = {}) {\r\n        this.pad = \"│   \"\r\n        this.padding = \"\"\r\n        this.tick = 1\r\n        this.messages = []\r\n        const wrapkey = (obj, key) => {\r\n            // trace this function\r\n            const oldfn = obj[key]\r\n            obj[key] = (...args) => {\r\n                this.fin(key, Array.prototype.slice.call(args))\r\n                const result = oldfn.apply(obj, args)\r\n                this.fout(key, result)\r\n                return result\r\n            }\r\n        }\r\n        // can't use Object.keys for prototype walking\r\n        for (let key in obj) {\r\n            if (typeof obj[key] === \"function\") {\r\n                wrapkey(obj, key)\r\n            }\r\n        }\r\n        this.log(\"┌ TRACELOG START\")\r\n    }\r\n    // called when entering a function\r\n    fin(fn, args) {\r\n        this.padding += this.pad\r\n        this.log(`├─> entering ${fn}`, args)\r\n    }\r\n    // called when exiting a function\r\n    fout(fn, result) {\r\n        this.log(\"│<──┘ generated return value\", result)\r\n        this.padding = this.padding.substring(0, this.padding.length - this.pad.length)\r\n    }\r\n    // log message formatting\r\n    format(s, tick) {\r\n        let nf = function(t) {\r\n            t = `${t}`\r\n            while (t.length < 4) {\r\n                t = `0${t}`\r\n            }\r\n            return t\r\n        }\r\n        return `${nf(tick)}> ${this.padding}${s}`\r\n    }\r\n    // log a trace message\r\n    log() {\r\n        let s = Array.prototype.slice.call(arguments)\r\n        const stringCollapse = function(v) {\r\n            if (!v) {\r\n                return \"<falsey>\"\r\n            }\r\n            if (typeof v === \"string\") {\r\n                return v\r\n            }\r\n            if (v instanceof HTMLElement) {\r\n                return v.outerHTML || \"<empty>\"\r\n            }\r\n            if (v instanceof Array) {\r\n                return `[${v.map(stringCollapse).join(\",\")}]`\r\n            }\r\n            return v.toString() || v.valueOf() || \"<unknown>\"\r\n        }\r\n        s = s.map(stringCollapse).join(\", \")\r\n        this.messages.push(this.format(s, this.tick++))\r\n    }\r\n    // turn the log into a structured string with\r\n    // unicode box codes to make it a sensible trace.\r\n    toString() {\r\n        let cap = \"×   \"\r\n        let terminator = \"└───\"\r\n        while (terminator.length <= this.padding.length + this.pad.length) {\r\n            terminator += cap\r\n        }\r\n        let _ = this.padding\r\n        this.padding = \"\"\r\n        terminator = this.format(terminator, this.tick)\r\n        this.padding = _\r\n        return `${this.messages.join(\"\\n\")}\\n${terminator}`\r\n    }\r\n}\r\n"],"names":["let","const","this","j","splitLength","nodeArray"],"mappings":"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"}